@attribute [Authorize]
@page "/Catalog/ProductEdit/{product_id}"
@rendermode InteractiveServer
@using MerchanterFrontend.Components.Pages.Catalog
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@using Newtonsoft.Json.Converters
@inject IPostHelper PostHelper
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IMessageService MessageService

<PageTitle>Ürün Düzenle | Merchanter</PageTitle>
    @if (HttpContextAccessor?.HttpContext?.User.Identity != null && HttpContextAccessor.HttpContext.User.Identity.IsAuthenticated) {
    @if (customer_id > 0 && !loading && product != null) {
        <FluentLabel Typo="Typography.H1">
            @product.name
        </FluentLabel>
        <FluentLayout Orientation="Orientation.Vertical" Style="padding-top:10px;">
            <FluentGrid Justify="JustifyContent.FlexStart">
                @if (!string.IsNullOrWhiteSpace(page_message)) {
                    <FluentGridItem xs="12">
                        <AlertComponent page_message="@page_message" message_status="@message_status" />
                    </FluentGridItem>
                }
                <FluentGridItem xs="12">
                    <FluentToolbar style="width:100%;border-radius:5px;padding:5px !important;" Orientation="Orientation.Horizontal">
                        <FluentIcon Value="@(new Icons.Filled.Size20.TetrisApp())" Slot="start" Color="Color.Accent" />
                        <FluentButton Appearance="Appearance.Outline" OnClick="@(() => GotoProducts())" Disabled="@loading" IconStart="@(new Icons.Regular.Size20.Backspace())">Geri</FluentButton>
                        <FluentBadge><b>Id:</b>&nbsp;@product.id</FluentBadge>
                        <FluentBadge>
                            <b>Tipi:</b>&nbsp;@switch (product_type) {
                                case Product.ProductTypes.SIMPLE:
                                    <span>Normal</span>
                                    break;
                                case Product.ProductTypes.CONFIGURABLE:
                                    <span>Ayarlanabilir</span>
                                    break;
                                case Product.ProductTypes.GROUPED:
                                    <span>Grup</span>
                                    break;
                                case Product.ProductTypes.BUNDLE:
                                    <span>Bundle</span>
                                    break;
                            }
                        </FluentBadge>
                        <FluentBadge>@(product.extension.is_enabled ? "Aktif" : "Pasif")</FluentBadge>
                        <FluentBadge>Stokta&nbsp;@(product.total_qty > 0 ? "Var" : "Yok")</FluentBadge>
                        <FluentBadge><b>Son güncelleme:</b>&nbsp;@product.update_date.ToString("MM.dd.yyyy HH:mm:ss")</FluentBadge>
                        <FluentButton Appearance="Appearance.Outline" Type="ButtonType.Button" OnClick="@(() => SaveProduct(product))" Disabled="@loading" Loading="@loading" IconStart="@(new Icons.Regular.Size20.Save())" Slot="end">Kaydet</FluentButton>
                    </FluentToolbar>
                </FluentGridItem>
                <FluentBreadcrumb Style="width:100%;padding-top:0 !important;">
                    <FluentBreadcrumbItem Type="home" Href="/">
                        Merchanter
                        <FluentIcon Value="@(new Icons.Regular.Size16.Home())" Color="@Color.Neutral" Slot="start" />
                    </FluentBreadcrumbItem>
                    <FluentBreadcrumbItem Type="product-list" Href="Catalog/Products">
                        Ürünler
                        <FluentIcon Value="@(new Icons.Regular.Size16.List())" Color="@Color.Neutral" Slot="start" />
                    </FluentBreadcrumbItem>
                    <FluentBreadcrumbItem Type="product-name">
                        @product.name
                        <FluentIcon Value="@(new Icons.Regular.Size16.TetrisApp())" Color="@Color.Neutral" Slot="start" />
                    </FluentBreadcrumbItem>
                </FluentBreadcrumb>
                <FluentDivider Style="width:100%;margin-top:0 !important;" />
                <FluentEditForm Model="@product" style="width:100%;padding-top:10px !important;">
                    <FluentGrid Justify="JustifyContent.SpaceBetween" Class="dotted" Spacing="2">
                        <FluentGridItem xs="12">
                            <FluentStack Orientation="Orientation.Vertical" VerticalAlignment="VerticalAlignment.Stretch" Style="height: 100%;">
                                <FluentTabs ActiveTabId="@active_product_tab.ToString()" Orientation="Orientation.Horizontal" Size="TabSize.Large" Width="100%" Style="padding-top:0 !important;">
                                    <FluentTab Overflow="false" Icon="@(new Icons.Regular.Size24.TetrisApp())"
                                               Visible="true" Label="Ürün Bilgileri" Id="@ProductTab.ProductInformation.ToString()"
                                               Style="height:400px;" LabelStyle="font-size:13pt !important;">
                                        <FluentGridItem xs="12">
                                            <FluentGrid Justify="JustifyContent.FlexStart" Class="dotted">
                                                <FluentGridItem xs="12" Justify="JustifyContent.FlexStart">
                                                    <FluentSwitch @bind-Value="@product.extension.is_enabled" Label="Ürün Durumu" Required="true" Style="margin-top:10px;">
                                                        <span slot="checked-message">Aktif</span>
                                                        <span slot="unchecked-message">Pasif</span>
                                                    </FluentSwitch>
                                                </FluentGridItem>
                                                <FluentGridItem xs="6">
                                                    <FluentTextField Label="Ürün Adı" @bind-Value="@product.name" Placeholder="Ürün adı boş olamaz..." Spellcheck="true" Required="true" Style="width:100%;">
                                                        <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                                                    </FluentTextField>
                                                </FluentGridItem>
                                                <FluentGridItem xs="6">
                                                    @if (brand_options != null) {
                                                        <FluentCombobox Label="Marka" Items="@brand_options" TOption="Option<Brand>"
                                                                        OptionText="@(b => b.Text)" Appearance="Appearance.Outline"
                                                                        @bind-Value="@product.extension.brand.brand_name"
                                                                        Autocomplete="ComboboxAutocomplete.Both" EnableClickToClose="true"
                                                                        Required="true" Height="300px" Style="width:100%;" />
                                                    }
                                                    else {
                                                        <FluentLabel Typo="Typography.Body" Color="Color.Disabled">Marka Yükleniyor...</FluentLabel>
                                                        <FluentSkeleton Shimmer="true" Style="width:100%;height:30px;margin-top:5px;"></FluentSkeleton>
                                                    }
                                                </FluentGridItem>
                                                <FluentGridItem xs="6">
                                                    <FluentTextField Label="Stok Kodu" @bind-Value="@product.sku" Placeholder="Stok kodu boş olamaz..." Required="true" Style="width:100%;">
                                                        <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                                                    </FluentTextField>
                                                </FluentGridItem>
                                                <FluentGridItem xs="6">
                                                    <FluentTextField Label="Barkod" @bind-Value="@product.barcode" Required="false" Style="width:100%;">
                                                        <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                                                    </FluentTextField>
                                                </FluentGridItem>
                                                <FluentDivider Style="width:100%;margin-top:0 !important;" />
                                                <FluentGridItem xs="6">
                                                    <FluentSelect Label="Kur" TOption="string" @bind-Value="@product.currency" Required="true" Style="width:100%;">
                                                        <FluentOption Value="TRY" Selected="@(product.currency == "TRY")">TRY (₺)</FluentOption>
                                                        <FluentOption Value="USD" Selected="@(product.currency == "USD")">USD ($)</FluentOption>
                                                        <FluentOption Value="EUR" Selected="@(product.currency == "EUR")">EUR (€)</FluentOption>
                                                    </FluentSelect>
                                                </FluentGridItem>
                                                <FluentGridItem xs="6">
                                                    <FluentNumberField Label="Liste Fiyatı" @bind-Value="@product.price" Required="true" Style="width:100%;">
                                                        <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                                                    </FluentNumberField>
                                                </FluentGridItem>
                                                <FluentGridItem xs="6">
                                                    <FluentNumberField Label="Satış Fiyatı" @bind-Value="@product.special_price" Required="false" Style="width:100%;">
                                                        <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                                                    </FluentNumberField>
                                                </FluentGridItem>
                                                <FluentGridItem xs="6">
                                                    <FluentNumberField Label="Özel Fiyat" @bind-Value="@product.custom_price" Required="false" Style="width:100%;">
                                                        <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                                                    </FluentNumberField>
                                                </FluentGridItem>
                                                <FluentDivider Style="width:100%;margin-top:0 !important;" />
                                                <FluentGridItem xs="6">
                                                    <FluentNumberField Label="Vergi (%)" @bind-Value="@product.tax" Required="true" Style="width:100%;">
                                                        <FluentIcon Value="@(new Icons.Regular.Size20.TagPercent())" Color="@Color.Neutral" Slot="start" />
                                                    </FluentNumberField>
                                                </FluentGridItem>
                                                <FluentGridItem xs="6" Justify="JustifyContent.FlexStart">
                                                    <FluentSwitch Label="Vergi Dahil Mi?" Value="@product.tax_included" ValueChanged="@(async (bool val) => TaxChanged(val))" Style="margin-top:10px;">
                                                        <span slot="checked-message">Evet</span>
                                                        <span slot="unchecked-message">Hayır</span>
                                                    </FluentSwitch>
                                                </FluentGridItem>
                                            </FluentGrid>
                                        </FluentGridItem>
                                    </FluentTab>
                                    <FluentTab Overflow="false" Icon="@(new Icons.Regular.Size24.TetrisApp())"
                                               Visible="true" Label="Ek Bilgiler" Id="@ProductTab.ProductExtension.ToString()"
                                               Style="height:400px;" LabelStyle="font-size:13pt !important;">
                                        <FluentGridItem xs="12">
                                            <FluentGrid Justify="JustifyContent.FlexStart" Class="dotted">
                                                <ProductExtensionComponent product_extension="@product.extension" />
                                            </FluentGrid>
                                        </FluentGridItem>
                                    </FluentTab>
                                    <FluentTab Overflow="false" Icon="@(new Icons.Regular.Size24.AppsList())"
                                               Visible="true" Label="Kategori Ağacı" Id="@ProductTab.Categories.ToString()"
                                               Style="height:400px;" LabelStyle="font-size:13pt !important;">
                                        <FluentGridItem xs="12">
                                            <FluentGrid Justify="JustifyContent.FlexStart" Class="dotted">
                                                <ProductCategoriesComponent product_extension="@product.extension" />
                                            </FluentGrid>
                                        </FluentGridItem>
                                    </FluentTab>
                                    <FluentTab Overflow="false" Icon="@(new Icons.Regular.Size24.HardDrive())"
                                               Visible="true" Label="@("Ürün Depoları(" + product.total_qty.ToString() + ")")" id="@ProductTab.OtherSources.ToString()"
                                               Style="height:400px;" LabelStyle="font-size:13pt !important;">
                                        <FluentGridItem xs="12">
                                            <FluentGrid Justify="JustifyContent.FlexStart" Class="dotted">
                                                <ProductSourcesComponent product_extension="@product.extension" product_sources="@product.sources" />
                                            </FluentGrid>
                                        </FluentGridItem>
                                    </FluentTab>
                                    <FluentTab Overflow="false" Icon="@(new Icons.Regular.Size24.Image())"
                                               Visible="true" Label="@("Resimler(" + product.images.Count + ")")" id="@ProductTab.Images.ToString()"
                                               Style="height:400px;" LabelStyle="font-size:13pt !important;">
                                        <FluentGridItem xs="12">
                                            <FluentGrid Justify="JustifyContent.FlexStart" Class="dotted">
                                                <ProductImagesComponent sku="@product.sku" product_images="@product.images" @ref="productImagesComponent" />
                                            </FluentGrid>
                                        </FluentGridItem>
                                    </FluentTab>
                                    <FluentTab Overflow="false" Icon="@(new Icons.Regular.Size24.PuzzlePiece())"
                                               Visible="true" Label="Özellikler(nyd)" id="@ProductTab.Attributes.ToString()"
                                               Style="height:400px;" LabelStyle="font-size:13pt !important;">
                                        <FluentGridItem xs="12">
                                            <FluentGrid Justify="JustifyContent.FlexStart" Class="dotted">
                                                <ProductAttributesComponent product_attributes="@product.attributes" />
                                            </FluentGrid>
                                        </FluentGridItem>
                                    </FluentTab>
                                </FluentTabs>
                            </FluentStack>
                        </FluentGridItem>
                    </FluentGrid>
                </FluentEditForm>
            </FluentGrid>
        </FluentLayout>
    }
    else {
        <FluentProgressRing Size="ProgressRingSize.Large" />
    }
}
else {
    <FluentLabel>Ürün düzenleme sayfasına erişim izniniz yok.</FluentLabel>
}

@code {
    [Parameter]
    public string product_id {
        get => _product_id;
        set {
            _product_id = value;
            if (int.TryParse(value, out int pid)) {
                PID = pid;
            }
            else {
                PID = 0;
            }
        }
    }
    private string _product_id = "0";
    public int PID { get; set; } = 0;
    public int customer_id { get; set; } = 0;
    public bool loading = true;
    private string? page_message = "";
    private string? message_status = "";
    private Product? product { get; set; } = null;
    public List<Option<Brand>>? brand_options { get; set; } = null;
    private Product.ProductTypes? product_type { get; set; } = null;
    private ProductTab active_product_tab { get; set; } = ProductTab.ProductInformation;
    public enum ProductTab { ProductInformation = 0, ProductExtension = 1, Categories = 2, OtherSources = 3, Images = 4, Attributes = 5 }
    public ProductImagesComponent? productImagesComponent = null;

    #region Iconcans
    private static Icon EditIcon(bool active = false) =>
        active ? new Icons.Filled.Size48.Edit()
               : new Icons.Regular.Size48.Edit();
    private static Icon EditExtensionIcon(bool active = false) =>
        active ? new Icons.Filled.Size48.Edit()
               : new Icons.Regular.Size48.Edit();
    private static Icon CategoryIcon(bool active = false) =>
        active ? new Icons.Filled.Size48.AppFolder()
               : new Icons.Regular.Size48.AppFolder();
    private static Icon OtherSourcesIcon(bool active = false) =>
        active ? new Icons.Filled.Size48.Backpack()
               : new Icons.Regular.Size48.Backpack();
    private static Icon ImagesIcon(bool active = false) =>
        active ? new Icons.Filled.Size48.ImageMultiple()
               : new Icons.Regular.Size48.ImageMultiple();
    #endregion

    protected override void OnInitialized() {
        if (int.TryParse(HttpContextAccessor.HttpContext?.User.Claims.FirstOrDefault(x => x.Type == Variables.customer_id)?.Value, out int CID)) {
            customer_id = CID;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender && PID > 0) {
            await Refresh(PID);
            if (brand_options == null) {
                await LoadBrands();
            }
        }
    }

    protected async Task Refresh(int _product_id) {
        await LoadProduct(_product_id);
    }

    private async Task LoadProduct(int _product_id) {
        try {
            loading = true;
            product = null;
            //StateHasChanged();
            var response = await PostHelper.Request<Product?>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Get, Classes.PostHelper.PostDestination.Api,
                $"api/Product/GetProduct/{_product_id}", null);
            if (response != null && response.Success && response.Data != null) {
                page_message = "";
                message_status = "";
                product = response.Data;
                product_type = product.type;
            }
        }
        catch (Exception ex) {
            Trace.WriteLine(ex.Message);
            product = null;
            page_message = $"Ürün {_product_id} yüklenirken hata oluştu.";
            message_status = "işlem başarısız";
        }
        finally {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task SaveProduct(Product _product) {
        try {
            loading = true;
            _product.extension.sku = _product.sku;
            _product.extension.barcode = _product.barcode;

            if (_product.images != null && _product.images.Count > 0) {
                foreach (var item in _product.images) {
                    if (item.id == 0 && !string.IsNullOrWhiteSpace(item.image_url)) {
                        if (!Directory.Exists(Path.Combine("wwwroot", "media", "catalog", "product", Path.GetDirectoryName(item.image_url)))) {
                            Directory.CreateDirectory(Path.Combine("wwwroot", "media", "catalog", "product", Path.GetDirectoryName(item.image_url)));
                        }
                        if (HasWritePermission("wwwroot/media/catalog/product")) {
                            string mertos = Path.Combine("wwwroot", @"temp\") + item.image_url;
                            string gingen = Path.Combine("wwwroot", "media", "catalog", @"product\") + item.image_url;
                            File.Move(mertos, gingen, true);
                            item.product_id = PID;
                        }
                    }
                }
            }
            if (productImagesComponent != null && productImagesComponent.deleted_images != null && productImagesComponent.deleted_images.Count > 0) {
                foreach (var item in productImagesComponent.deleted_images) {
                    if (item.id > 0) {
                        File.Delete(Path.Combine("wwwroot", "media", "catalog", "product", item.image_url));
                    }
                }
            }

            var json = JsonConvert.SerializeObject(_product);
            var response = await PostHelper.Request<Product?>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Put, Classes.PostHelper.PostDestination.Api,
                "api/Product/SaveProduct",
                new StringContent(json, Encoding.UTF8, "application/json")
                );
            if (response != null && response.Success && response.Data != null) {
                product = response.Data;
                page_message = $"Ürün {_product.sku} başarıyla kaydedildi.";
                message_status = "işlem başarılı";
            }
        }
        catch (Exception ex) {
            Trace.WriteLine(ex.Message);
            page_message = $"Ürün {_product.sku} kaydedilirken hata oluştu.";
            message_status = "işlem başarısız";
        }
        finally {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task LoadBrands() {
        try {
            loading = true;
            var apifilter = new ApiFilter() { Pager = new Pager() { ItemsPerPage = int.MaxValue } };
            string json = JsonConvert.SerializeObject(apifilter);
            var response = await PostHelper.Request<List<Brand>>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Post, Classes.PostHelper.PostDestination.Api,
                "api/Brand/GetBrands",
                new StringContent(json, Encoding.UTF8, "application/json")
                );
            if (response != null && response.Success && response.Data != null) {
                response.Data = response.Data.DistinctBy(x => x.brand_name).OrderBy(x => x.brand_name).ToList();
                brand_options = response.Data
                    .Select(b => new Option<Brand> { Value = b, Text = b.brand_name })
                    .ToList();
            }
        }
        catch (Exception ex) {
            Trace.WriteLine(ex.Message);
            brand_options = null;
        }
        finally {
            loading = false;
            StateHasChanged();
        }
    }

    private void ChangeTab(ProductTab tab) {
        active_product_tab = tab;
        StateHasChanged();
    }

    private void TaxChanged(bool val) {
        if (product != null) {
            product.tax_included = val;
            if (product.tax_included) {
                product.price = product.price * (1 + (product.tax / 100m));
                product.special_price = product.special_price * (1 + (product.tax / 100m));
                product.custom_price = product.custom_price * (1 + (product.tax / 100m));
            }
            else {
                product.price = product.price / (1 + (product.tax / 100m));
                product.special_price = product.special_price / (1 + (product.tax / 100m));
                product.custom_price = product.custom_price / (1 + (product.tax / 100m));
            }
            StateHasChanged();
        }
    }

    private void GotoProducts() {
        product = null;
        PID = 0;
        NavigationManager.NavigateTo($"Catalog/Products", false);
    }

    public bool HasWritePermission(string directoryPath) {
        try {
            string testFile = Path.Combine(directoryPath, Path.GetRandomFileName());
            using (FileStream fs = File.Create(testFile, 1, FileOptions.DeleteOnClose)) { }
            return true;
        }
        catch (UnauthorizedAccessException) {
            return false;
        }
        catch (Exception) {
            // Handle other exceptions if needed
            return false;
        }
    }
}