@attribute [Authorize]
@page "/Account/Profile"
@using Newtonsoft.Json
@using System.Text
@inject IPostHelper PostHelper
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager navigationManager

<PageTitle>Hesap > Profil | Merchanter</PageTitle>

@if (customer_id > 0) {
    @if (HttpContextAccessor?.HttpContext?.User.Identity != null && HttpContextAccessor.HttpContext.User.Identity.IsAuthenticated) {
        <FluentLabel Typo="Typography.H1"><FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size28.Person())" />&nbsp;@HttpContextAccessor.HttpContext?.User.Claims.FirstOrDefault(x => x.Type == Variables.company_name)?.Value</FluentLabel>

        <FluentLayout Orientation="Orientation.Vertical" Style="padding-top:10px;">
            <FluentGrid>
                <FluentGridItem md="2" Justify="JustifyContent.FlexStart" HiddenWhen="GridItemHidden.MdAndDown">
                    <FluentToolbar id="nav-toolbar" style="width:100%;border-radius:5px;padding:5px !important;" Orientation="Orientation.Vertical">
                        <FluentButton Appearance="Appearance.Neutral" OnClick="@(() => SetActiveTab("customer") )" Disabled="@(customer_active)" IconStart="@(new Icons.Regular.Size20.Person())">Kullanıcı Profili</FluentButton>
                        <FluentButton Appearance="Appearance.Neutral" OnClick="@(() => SetActiveTab("syncs") )" Disabled="@(syncs_active)" IconStart="@(new Icons.Regular.Size20.ArrowSync())">Senk. Durumları</FluentButton>
                        <FluentButton Appearance="Appearance.Neutral" OnClick="@(() => SetActiveTab("settings") )" Disabled="@(settings_active)" IconStart="@(new Icons.Regular.Size20.Settings())">Ayarlar</FluentButton>
                        <FluentButton Appearance="Appearance.Neutral" OnClick="@(() => SetActiveTab("platforms") )" Disabled="@(platforms_active)" IconStart="@(new Icons.Regular.Size20.Apps())">Plarformlar</FluentButton>
                        <FluentButton Appearance="Appearance.Neutral" OnClick="@(() => SetActiveTab("integrations") )" Disabled="@(integrations_active)" IconStart="@(new Icons.Regular.Size20.AppFolder())">Entegrasyonlar</FluentButton>
                        <FluentButton Appearance="Appearance.Neutral" OnClick="@(() => SetActiveTab("logs") )" Disabled="@(logs_active)" IconStart="@(new Icons.Regular.Size20.ReadingList())">Olay Günlükleri</FluentButton>
                    </FluentToolbar>
                </FluentGridItem>
                @if (customer_active) {
                    <FluentGridItem md="10" xs="12">
                        <CustomerComponent customer_id="@customer_id" />
                    </FluentGridItem>
                }
                else if (logs_active) {
                    <FluentGridItem md="10" xs="12">
                        <LogsComponent customer_id="@customer_id" />
                    </FluentGridItem>
                }
                else if (settings_active) {
                    <FluentGridItem md="10" xs="12">
                        <SettingsComponent customer_id="@customer_id" />
                    </FluentGridItem>
                }
                else if (integrations_active) {

                }
                else if (platforms_active) {

                }
                else if (syncs_active) {
                    <FluentGridItem md="10" xs="12">
                        <SyncStatusesComponent customer_id="@customer_id" />
                    </FluentGridItem>
                }

            </FluentGrid>
        </FluentLayout>
    }
}

@code {
    public int customer_id { get; set; } = 0;
    public Customer? customer { get; set; }
    private string page_message = string.Empty;
    private string? message_status = null;
    public bool is_refreshing { get; set; } = false;
    [SupplyParameterFromQuery(Name = "ActiveTab")]
    public string? ActiveTab { get; set; } = "customer";
    public bool settings_active = false;
    public bool logs_active = false;
    public bool integrations_active = false;
    public bool platforms_active = false;
    public bool customer_active = true;
    public bool syncs_active = false;

    protected override void OnInitialized() {
        if (int.TryParse(HttpContextAccessor.HttpContext?.User.Claims.FirstOrDefault(x => x.Type == Variables.customer_id)?.Value, out int CID)) {
            customer_id = CID;
        }
    }

    protected override async void OnParametersSet() {
        if (ActiveTab != null) {
            await SetActiveTab(ActiveTab);
        }
        base.OnParametersSet();
    }

    private async Task SetActiveTab(string tab) {
        if (tab == "logs") {
            logs_active = true;
            settings_active = false;
            integrations_active = false;
            platforms_active = false;
            customer_active = false;
            syncs_active = false;
            ActiveTab = "logs";
            navigationManager.NavigateTo("/Account/Profile?ActiveTab=logs");
        }
        else if (tab == "settings") {
            logs_active = false;
            settings_active = true;
            integrations_active = false;
            platforms_active = false;
            customer_active = false;
            syncs_active = false;
            ActiveTab = "settings";
            navigationManager.NavigateTo("/Account/Profile?ActiveTab=settings");
        }
        else if (tab == "integrations") {
            logs_active = false;
            settings_active = false;
            integrations_active = true;
            platforms_active = false;
            customer_active = false;
            syncs_active = false;
            ActiveTab = "integrations";
            navigationManager.NavigateTo("/Account/Profile?ActiveTab=integrations");
        }
        else if (tab == "platforms") {
            logs_active = false;
            settings_active = false;
            integrations_active = false;
            platforms_active = true;
            customer_active = false;
            syncs_active = false;
            ActiveTab = "platforms";
            navigationManager.NavigateTo("/Account/Profile?ActiveTab=platforms");
        }
        else if (tab == "customer") {
            logs_active = false;
            settings_active = false;
            integrations_active = false;
            platforms_active = false;
            customer_active = true;
            syncs_active = false;
            ActiveTab = "customer";
            navigationManager.NavigateTo("/Account/Profile?ActiveTab=customer");
        }
        else if (tab == "syncs") {
            logs_active = false;
            settings_active = false;
            integrations_active = false;
            platforms_active = false;
            customer_active = false;
            syncs_active = true;
            ActiveTab = "syncs";
            navigationManager.NavigateTo("/Account/Profile?ActiveTab=syncs");
        }
        await Task.CompletedTask;
    }
}
