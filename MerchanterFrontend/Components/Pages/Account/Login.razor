@page "/Account/Login"
@layout LoginLayout
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.Http.Extensions
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@inject IPostHelper PostHelper
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager

<PageTitle>Giriş | Merchanter</PageTitle>

@if (customer != null) {
    <div class="container text-center mt-5">
        <div class="row">
            <div class="col-1 col-sm-2 col-md-3"></div>
            <div class="col-10 col-sm-8 col-md-6">
                <EditForm method="post" FormName="LoginForm" Model="customer" OnValidSubmit="LoginSubmit">
                    <img class="mb-4" src="ceres_logo_dark_base.png" alt="logo" width="150" />
                    <h1 class="fw-normal">Merchanter Yönetici Girişi</h1><hr />
                    <span class="text-danger">@login_message</span>
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <ValidationSummary></ValidationSummary>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="customer.Email" class="form-control" placeholder="Email adresinizi giriniz"></InputText>
                        <label for="floatingInput">Email</label>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="customer.Password" class="form-control" placeholder="Şifrenizi giriniz"></InputText>
                        <label for="floatingPassword">Şifre</label>
                    </div>
                    <div class="form-floating mb-3">
                        <div class="checkbox">
                            <label>
                                <InputCheckbox @bind-Value="remember_me"></InputCheckbox>&nbsp;&nbsp;&nbsp;Beni hatırla
                            </label>
                        </div>
                    </div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary"><i class="bi bi-box-arrow-in-right"></i>&nbsp;Giriş</button>
                </EditForm>
            </div>
            <div class="col-1 col-sm-2 col-md-3"></div>
        </div>
    </div>
}

@code {
    [SupplyParameterFromForm(FormName = "LoginForm")]
    private CustomerLogin customer { get; set; } = new CustomerLogin();

    public bool remember_me { get; set; } = false;

    private class CustomerLogin {
        [Required]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }
    }

    private string login_message = string.Empty;

    private async Task LoginSubmit() {
        if (HttpContextAccessor != null && HttpContextAccessor.HttpContext != null) {
            if (customer != null && !string.IsNullOrWhiteSpace(customer.Email) && !string.IsNullOrEmpty(customer.Password)) {
                var response = await PostHelper.Request<UserLoginResponseModel>(null,
                        Classes.PostHelper.PostMethod.Login, Classes.PostHelper.PostDestination.Api,
                        "api/Auth/Login",
                        new StringContent(JsonConvert.SerializeObject(customer), Encoding.UTF8, "application/json")
                    );

                if (response != null && response.Success && response.Data != null) {
                    var login = response.Data;
                    if (login != null && login.AuthenticateResult) {
                        if (login.Settings != null) {
                            login_message = "Giriş yapılıyor";
                            await HttpContextAccessor.HttpContext.SignInAsync(Variables.auth_cookie,
                                new ClaimsPrincipal(
                                    new ClaimsIdentity(
                                        new List<Claim>() {
                                            new Claim(Variables.customer_id, login.Settings.customer.customer_id.ToString()),
                                            new Claim(ClaimTypes.Name , login.Settings.customer.user_name),
                                            new Claim(ClaimTypes.Email, login.Settings.customer.email),
                                            new Claim(ClaimTypes.Role, Variables.customer_role/* TODO: add admin role*/),
                                            new Claim(Variables.remember_me, remember_me.ToString()),
                                            new Claim(Variables.auth_token, login.AuthToken),
                                            new Claim(Variables.person_name, login.Settings.customer.person_name ?? ""),
                                            new Claim(Variables.company_name, login.Settings.settings.company_name),
                                            new Claim(Variables.default_brand, login.Settings.product.default_brand)
                                         },
                                    Variables.auth_cookie)),
                                    new AuthenticationProperties {
                                            IsPersistent = remember_me,
                                            RedirectUri = UriHelper.Encode(new Uri(NavigationManager.BaseUri)),
                                            ExpiresUtc = login.AccessTokenExpireDate.ToUniversalTime(),
                                            AllowRefresh = true
                                    });
                        }
                        else {
                            login_message = "Kullanıcının ayarları alınamadı.";
                        }
                    }
                    else {
                        login_message = string.Empty;
                    }

                    StateHasChanged();
                }
                else {
                    login_message = "Girilen bilgilerle giriş yapılamadı.";
                }
            }
        }
    }
}
