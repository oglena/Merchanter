@rendermode InteractiveServer
@using System.Text.Json.Serialization
@using MerchanterFrontend.Components.Pages.Catalog
@using Newtonsoft.Json
@using System.Text
@inject IPostHelper PostHelper
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IMessageService MessageService

@if (customer_id > 0 && categories != null) {
    <FluentGrid Justify="JustifyContent.SpaceBetween" Spacing="2">
        @if (!string.IsNullOrWhiteSpace(page_message)) {
            <FluentGridItem xs="12">
                <AlertComponent page_message="@page_message" message_status="@message_status" />
            </FluentGridItem>
        }
        <FluentGridItem xs="12">
            <FluentToolbar style="width:100%;border-radius:5px;padding:5px !important;" Orientation="Orientation.Horizontal">
                <FluentIcon Value="@(new Icons.Filled.Size20.Apps())" Slot="start" Color="Color.Accent" />
                <FluentButton Appearance="Appearance.Outline" IconStart="@(new Icons.Regular.Size20.New())">Yeni Kategori</FluentButton>
                <FluentSelect Data="@category_is_active_filter" TOption="CategoryStatus" ValueChanged="@((e) => OnCategoryActiveFilterChanged(e))" Width="200px" Appearance="Appearance.Stealth" Style="margin-right:10px;" slot="end">
                    <FluentOption Value="0" Selected="@(category_is_active_filter == CategoryStatus.All)">Tüm Durumlar</FluentOption>
                    <FluentOption Value="1" Selected="@(category_is_active_filter == CategoryStatus.Active)">Aktif Kategoriler</FluentOption>
                    <FluentOption Value="2" Selected="@(category_is_active_filter == CategoryStatus.Passive)">Pasif Kategoriler</FluentOption>
                </FluentSelect>
                <FluentTextField @bind-Value="@category_name_filter" Placeholder="Ara" Style="margin-right:10px;" slot="end">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Search())" Color="@Color.Neutral" Slot="end" />
                </FluentTextField>
                <FluentButton Appearance="Appearance.Outline" OnClick="Refresh" Disabled="loading" Loading="@loading" IconStart="@(new Icons.Regular.Size20.Filter())" Style="margin-right:10px;" Slot="end">Filtrele</FluentButton>
                <FluentButton Appearance="Appearance.Outline" OnClick="ClearFilters" Disabled="loading" Loading="@loading" IconStart="@(new Icons.Regular.Size20.Broom())" Slot="end">Temizle</FluentButton>
            </FluentToolbar>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <FluentPaginator State="@pagination" CurrentPageIndexChanged="Refresh">
                <SummaryTemplate>
                    <div style="display:flex;align-items:center;">
                        <FluentSelect TOption="int" Width="100px" ValueChanged="@(async (e) => await OnItemsPerPageChanged(e))">
                            <FluentOption Value="5" Selected="@(pagination.ItemsPerPage == 5)">5 adet</FluentOption>
                            <FluentOption Value="10" Selected="@(pagination.ItemsPerPage == 10)">10 adet</FluentOption>
                            <FluentOption Value="20" Selected="@(pagination.ItemsPerPage == 20)">20 adet</FluentOption>
                            <FluentOption Value="50" Selected="@(pagination.ItemsPerPage == 50)">50 adet</FluentOption>
                        </FluentSelect>
                        <FluentLabel Typo="Typography.Body">&nbsp;&nbsp;Toplam: <strong>@(pagination.TotalItemCount ?? 0)</strong> girdi</FluentLabel>
                    </div>
                </SummaryTemplate>
                <PaginationTextTemplate>
                    <strong>@(pagination.CurrentPageIndex + 1)</strong> / <strong>@(pagination.LastPageIndex + 1)</strong> sayfa
                </PaginationTextTemplate>
            </FluentPaginator>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <FluentDataGrid Id="categories-grid" Items="@categories" RowSize="DataGridRowSize.Large" GenerateHeader="GenerateHeaderOption.Sticky"
            TGridItem="Category" Loading="loading" DisplayMode="DataGridDisplayMode.Grid" ShowHover="true">
                <ChildContent>
                    <PropertyColumn Title="ID" Property="@(c => c.id)" Width="100px" Align="Align.End" />
                    <PropertyColumn Title="Kaynak ID" Property="@(c => c.source_category_id)" Align="Align.Center" />
                    <PropertyColumn Title="Üst Kategori ID" Property="@(c => c.parent_id)" Align="Align.Center" />
                    <PropertyColumn Title="Kategori Adı" Property="@(c => c.category_name)" Align="Align.Center" />
                    <PropertyColumn Title="Durum" Property="@(c => c.is_active ? "Aktif" : "Pasif")" Align="Align.Center" />
                    <TemplateColumn Title="" Width="250px">
                        <FluentButton Appearance="Appearance.Outline" IconStart="@(new Icons.Regular.Size20.Delete())">Sil</FluentButton>
                        <FluentButton Appearance="Appearance.Outline" IconStart="@(new Icons.Regular.Size20.Edit())">Düzenle</FluentButton>
                    </TemplateColumn>
                </ChildContent>
                <EmptyContent>
                    <FluentLayout>
                        <ChildContent>
                            <span style="color: #9f9f9f;font-weight: bold"><i>Veri Yok.</i></span>
                        </ChildContent>
                    </FluentLayout>
                </EmptyContent>
                <LoadingContent>
                    <FluentLayout Orientation="Orientation.Horizontal">
                        <ChildContent>
                            <FluentProgressRing />
                        </ChildContent>
                    </FluentLayout>
                </LoadingContent>
            </FluentDataGrid>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <FluentPaginator State="@pagination" CurrentPageIndexChanged="Refresh">
                <SummaryTemplate>
                    <div style="display:flex;align-items:center;">
                        <FluentSelect TOption="int" Width="100px" ValueChanged="@(async (e) => await OnItemsPerPageChanged(e))">
                            <FluentOption Value="5" Selected="@(pagination.ItemsPerPage == 5)">5 adet</FluentOption>
                            <FluentOption Value="10" Selected="@(pagination.ItemsPerPage == 10)">10 adet</FluentOption>
                            <FluentOption Value="20" Selected="@(pagination.ItemsPerPage == 20)">20 adet</FluentOption>
                            <FluentOption Value="50" Selected="@(pagination.ItemsPerPage == 50)">50 adet</FluentOption>
                        </FluentSelect>
                        <FluentLabel Typo="Typography.Body">&nbsp;&nbsp;Toplam: <strong>@(pagination.TotalItemCount ?? 0)</strong> girdi</FluentLabel>
                    </div>
                </SummaryTemplate>
                <PaginationTextTemplate>
                    <strong>@(pagination.CurrentPageIndex + 1)</strong> / <strong>@(pagination.LastPageIndex + 1)</strong> sayfa
                </PaginationTextTemplate>
            </FluentPaginator>
        </FluentGridItem>
    </FluentGrid>
}
else {
    <FluentProgress Width="100%" Stroke="ProgressStroke.Small"></FluentProgress>
}

@code {
    [Parameter]
    public int customer_id { get; set; } = 0;
    IQueryable<Category>? categories { get; set; } = null;
    bool loading = false;
    private string? page_message = "";
    private string? message_status = "";
    private string? category_name_filter = null;
    private CategoryStatus category_is_active_filter { get; set; } = CategoryStatus.All;
    PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };
    public enum CategoryStatus { All = 0, Active = 1, Passive = 2 }

    private IDialogReference? _dialog;

    protected override async Task OnParametersSetAsync() {
        if (int.TryParse(HttpContextAccessor.HttpContext?.User.Claims.FirstOrDefault(x => x.Type == Variables.customer_id)?.Value, out int CID)) {
            customer_id = CID;
            await Refresh();
        }
    }

    protected async Task Refresh() {
        await LoadCategories();
    }

    private async Task LoadCategories() {
        try {
            loading = true;
            var apifilter = new ApiFilter() {
                    Pager = new Pager() {
                        ItemsPerPage = pagination.ItemsPerPage,
                        CurrentPageIndex = pagination.CurrentPageIndex
                    },
                    Filters = new List<Filter<dynamic>>(),
                };
            if (!string.IsNullOrWhiteSpace(category_name_filter)) {
                apifilter.Filters.Add(new Filter<dynamic>() {
                        Field = "category_name",
                        Operator = "LIKE",
                        Value = "%" + category_name_filter + "%"
                    });
            }
            if (category_is_active_filter != CategoryStatus.All) {
                apifilter.Filters.Add(new Filter<dynamic>() {
                        Field = "is_active",
                        Value = category_is_active_filter == CategoryStatus.Active ? 1 : 0
                    });
            }
            string json = JsonConvert.SerializeObject(apifilter);
            var response = await PostHelper.Request<List<Category>>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Post, Classes.PostHelper.PostDestination.Api,
                "api/Category/GetCategories",
                new StringContent(json, Encoding.UTF8, "application/json")
                );

            if (response != null && response.Success && response.Data != null) {
                categories = response.Data.AsQueryable();
                if (response.ApiFilter != null) {
                    await pagination.SetTotalItemCountAsync(response.ApiFilter.TotalCount.GetValueOrDefault());
                }
            }
        }
        catch (Exception ex) {
            Console.WriteLine(ex.Message);
            categories = null;
        }
        finally {
            page_message = "";
            message_status = "";
            loading = false;
            StateHasChanged();
        }
    }

    private void OnCategoryActiveFilterChanged(string? _status) {
        if (string.IsNullOrWhiteSpace(_status)) {
            category_is_active_filter = CategoryStatus.All;
            return;
        }
        if (int.TryParse(_status, out int status)) {
            category_is_active_filter = (CategoryStatus)status;
        }
        else {
            category_is_active_filter = CategoryStatus.All;
        }
    }

    private async Task OnItemsPerPageChanged(string _items_per_page) {
        pagination.ItemsPerPage = int.Parse(_items_per_page);
        await pagination.SetCurrentPageIndexAsync(0); // Reset to the first page
        await Refresh();
    }

    public async void ClearFilters() {
        category_name_filter = null;
        category_is_active_filter = CategoryStatus.All;
        await pagination.SetCurrentPageIndexAsync(0);
        await Refresh();
    }
}
