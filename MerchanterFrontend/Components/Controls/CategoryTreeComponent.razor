@rendermode InteractiveServer
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@inject IPostHelper PostHelper
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager

@if (customer_id > 0 && categories != null) {
    <FluentGrid Justify="JustifyContent.SpaceBetween" Spacing="2">
        <FluentGridItem xs="12">
            <FluentTreeView Items="@Items?.AsQueryable()" SelectedItemChanged="SelectedItemChanged">
                <ItemTemplate>
                    @context.Text
                    <span style="color: var(--accent-fill-rest); margin: 0 4px;">
                        @(context.Items == null ? "" : $"[{context.Items.Count()}]")
                    </span>
                </ItemTemplate>
            </FluentTreeView>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <div>
                Toplam:&nbsp;<strong>@Count</strong> kategori
            </div>
            @if (SelectedCategory != null) {
                <div>
                    Seçili Kategori:&nbsp;<b>@(SelectedCategory.category_name.EndsWith("-root") ? "Ana Kategori" : SelectedCategory?.category_name)</b>
                </div>
            }
        </FluentGridItem>
    </FluentGrid>
}
else {
    <FluentProgressRing Size="ProgressRingSize.Large" />
}


@code {
    [Parameter]
    public int customer_id { get; set; } = 0;
    [Parameter]
    public Func<Task> OnRefresh { get; set; } = default!;
    [Parameter]
    public Func<Task> OnNewCategory { get; set; } = default!;
    private IQueryable<Category>? categories { get; set; } = null;
    public Category default_category { get; set; } = null;
    public bool loading = true;

    public Category? SelectedCategory;
    public Category? ParentCategory;
    private int Count = -1;
    private List<ITreeViewItem> Items = new List<ITreeViewItem>();

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await GetDefaultCategory();
            await Refresh();
        }
    }

    public async Task Refresh(Category? _selected_category = null) {
        if (default_category != null) {
            Items.Clear();
            await Task.Run(async () => {
                Items.Add(new TreeViewItem {
                        Id = default_category.id.ToString(),
                        Text = "Ana Kategori",
                        Expanded = true,
                        Items = await LoadCategoryTreeAsync(default_category.id, _selected_category)
                    });
            });
        }
        StateHasChanged();
    }

    private async Task<List<TreeViewItem>?> LoadCategoryTreeAsync(int _root_id, Category? _selected_category = null) {
        try {
            loading = true;
            var apifilter = new ApiFilter() {
                    Pager = new Pager() {
                        ItemsPerPage = int.MaxValue,
                        CurrentPageIndex = 0
                    },
                    Filters = new List<Filter<dynamic>>(),
                };
            string json = JsonConvert.SerializeObject(apifilter);
            var response = await PostHelper.Request<List<Category>>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Post, Classes.PostHelper.PostDestination.Api,
                "api/Category/GetCategories",
                new StringContent(json, Encoding.UTF8, "application/json")
                );

            var treeItem = new List<TreeViewItem>();
            if (response != null && response.Success && response.Data != null) {
                response.Data = response.Data.OrderBy(x => x.id).ToList();
                categories = response.Data.AsQueryable();
                Count = categories.Count();
                if (response.ApiFilter != null && response.Data.Count > 0) {
                    // Build a lookup for parent_id -> children for O(1) access
                    var categoryLookup = categories.GroupBy(c => c.parent_id)
                                                   .ToDictionary(g => g.Key, g => g.ToList());

                    // Local function to build tree recursively (iterative for stack safety)
                    List<TreeViewItem> BuildTree(int parentId) {
                        var result = new List<TreeViewItem>();
                        if (!categoryLookup.TryGetValue(parentId, out var children))
                            return result;
                        foreach (var child in children) {
                            var item = new TreeViewItem {
                                    Id = child.id.ToString(),
                                    Text = child.category_name + (!child.is_active ? " (pasif)" : ""),
                                    Expanded = false,
                                    Items = BuildTree(child.id),
                                };
                            result.Add(item);
                        }
                        return result;
                    }

                    // Start from the given _root_id
                    treeItem = BuildTree(_root_id);
                }
                else {
                    return null;
                }
            }
            return treeItem;
        }
        catch (Exception ex) {
            Console.WriteLine(ex.Message);
            categories = null;
            return new List<TreeViewItem>();
        }
        finally {
            loading = false;
        }
    }

    public async Task SelectedItemChanged(ITreeViewItem? args) {
        SelectedCategory = null;
        ParentCategory = null;
        if (int.TryParse(args?.Id, out int id)) {
            SelectedCategory = categories?.FirstOrDefault(x => x.id == id);
            if (SelectedCategory != null) {
                ParentCategory = categories?.FirstOrDefault(x => x.id == SelectedCategory.parent_id);
                if (ParentCategory != null && ParentCategory.category_name.EndsWith("-root")) {
                    ParentCategory.category_name = "Ana Kategori";
                }
            }
        }
        if (OnRefresh != null) {
            await OnRefresh.Invoke();
        }
        if (OnNewCategory != null) {
            await OnNewCategory.Invoke();
        }
    }

    protected async Task GetDefaultCategory() {
        var response = await PostHelper.Request<Category>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
            Classes.PostHelper.PostMethod.Get, Classes.PostHelper.PostDestination.Api,
            "api/Category/GetDefaultCategory", null);
        if (response != null && response.Success && response.Data != null) {
            default_category = response.Data;
        }
    }
}
