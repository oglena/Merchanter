@rendermode InteractiveServer
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration configuration
@inject IPostHelper PostHelper
@inject IToastService ToastService

@if (customer_id > 0 && customer != null) {
    <FluentCard Style="text-align:center;">
        <FluentLabel Typo="Typography.H2" Color="@(server != null ? Color.Success : Color.Error)">@(server != null ? "Server Çalışıyor" : "Server Beklemede")</FluentLabel>
        <AlertComponent page_message="@page_message" message_status="@message_status" />
        <FluentLabel Typo="Typography.Body" Color="Color.Accent">@(customer.status ? "[LİSANSLI KULLANICI]" : "[LİSANS BULUNAMADI]")</FluentLabel>
        <FluentBadge Appearance="Appearance.Lightweight" Width="250px" Style="padding:5px;">
            <FluentButton Type="ButtonType.Button" Appearance="Appearance.Neutral" OnClick="GotoProfile" IconStart="@(new Icons.Regular.Size28.Person())" title="Profil"></FluentButton>&nbsp;&nbsp;
            <FluentButton Type="ButtonType.Button" Appearance="Appearance.Neutral" OnClick="GotoSettings" IconStart="@(new Icons.Regular.Size28.Settings())" title="Genel Ayarlar"></FluentButton>&nbsp;&nbsp;
            <FluentButton Type="ButtonType.Button" Appearance="Appearance.Neutral" OnClick="GotoPlatforms" IconStart="@(new Icons.Regular.Size28.Apps())" title="Platformlar"></FluentButton>&nbsp;&nbsp;
            <FluentButton Type="ButtonType.Button" Appearance="Appearance.Neutral" OnClick="GotoIntegrations" IconStart="@(new Icons.Regular.Size28.AppFolder())" title="Entegrasyonlar"></FluentButton>&nbsp;&nbsp;
            @* <FluentButton Type="ButtonType.Button" Appearance="Appearance.Neutral" OnClick="RefreshServers" Loading="@is_refreshing" IconStart="@(new Icons.Regular.Size28.ArrowClockwise())" title="Çalışma Durumlarını Yenile"></FluentButton> *@
        </FluentBadge>
        <FluentDivider Style="width: 100%;margin:10px 0 10px 0;" Orientation=Orientation.Horizontal Role="DividerRole.Separator" />
        <FluentLabel Typo="Typography.Subject" Color="@(server != null && server.PID > 0 ? Color.Success : Color.Error)">İşlem No:&nbsp;[<strong>@(server != null ? server.PID.ToString() : "0")</strong>]</FluentLabel>
        <FluentDivider Style="width: 100%;margin:10px 0 10px 0;" Orientation=Orientation.Horizontal Role="DividerRole.Separator" />
        <!-- #Çalışma Durumları -->
        <FluentGrid Id="sync-statuses-grid-yes" Spacing="2" Justify="JustifyContent.FlexStart">
            <FluentGridItem xs="12" Style="text-align:center;">
                <FluentLabel Typo="Typography.PaneHeader" Color="Color.Accent">[Çalışma Durumları]</FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="7" Style="text-align:end;padding:5px;">
                <FluentLabel Typo="Typography.H4" Color="Color.Neutral">
                    <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.TetrisApp())" Slot="start" />
                    Ürün Senk.:
                </FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="5" Style="text-align:start;padding:5px;">
                <FluentLabel Typo="Typography.H4" Color="@(!customer.product_sync_status ? Color.Disabled : Color.Neutral)" Style="width: 100%;margin:5px 0 5px 0;">
                    @if (!customer.product_sync_status) {
                        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.PauseCircle())" Color="@Color.Error" Slot="end" Title="durduruldu" />
                    }
                    else { @if (customer.is_productsync_working) {
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.PlayCircle())" Color="@Color.Success" Slot="end" Title="çalışıyor" />
                        }
                        else {
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.SubtractCircle())" Color="@Color.Neutral" Slot="end" Title="beklemede" />
                        }
                    }
                </FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="7" Style="text-align:end;padding:5px;">
                <FluentLabel Typo="Typography.H4" Color="Color.Neutral">
                    <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.ShoppingBag())" Slot="start" />
                    Sipariş Senk.:
                </FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="5" Style="text-align:start;padding:5px;">
                <FluentLabel Typo="Typography.H4" Color="@(!customer.order_sync_status ? Color.Disabled : Color.Neutral)" Style="width: 100%;margin:5px 0 5px 0;">
                    @if (!customer.order_sync_status) {
                        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.PauseCircle())" Color="@Color.Error" Slot="end" Title="durduruldu" />
                    }
                    else {
                        @if (customer.is_ordersync_working) {
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.PlayCircle())" Color="@Color.Success" Slot="end" Title="çalışıyor" />
                        }
                        else {
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.SubtractCircle())" Color="@Color.Neutral" Slot="end" Title="beklemede" />
                        }
                    }
                </FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="7" Style="text-align:end;padding:5px;">
                <FluentLabel Typo="Typography.H4" Color="Color.Neutral">
                    <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.AlertUrgent())" Slot="start" />
                    Bildirim Senk.:
                </FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="5" Style="text-align:start;padding:5px;">
                <FluentLabel Typo="Typography.H4" Color="@(!customer.order_sync_status ? Color.Disabled : Color.Neutral)" Style="width: 100%;margin:5px 0 5px 0;">
                    @if (!customer.notification_sync_status) {
                        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.PauseCircle())" Color="@Color.Error" Slot="end" Title="durduruldu" />
                    }
                    else {
                        @if (customer.is_notificationsync_working) {
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.PlayCircle())" Color="@Color.Success" Slot="end" Title="çalışıyor" />
                        }
                        else {
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.SubtractCircle())" Color="@Color.Neutral" Slot="end" Title="beklemede" />
                        }
                    }
                </FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="7" Style="text-align:end;padding:5px;">
                <FluentLabel Typo="Typography.H4" Color="Color.Neutral">
                    <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.DocumentOnePage())" Slot="start" />
                    Fatura Senk.:
                </FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="5" Style="text-align:start;padding:5px;">
                <FluentLabel Typo="Typography.H4" Color="@(!customer.order_sync_status ? Color.Disabled : Color.Neutral)" Style="width: 100%;margin:5px 0 5px 0;">
                    @if (!customer.invoice_sync_status) {
                        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.PauseCircle())" Color="@Color.Error" Slot="start" Title="durduruldu" />
                    }
                    else {
                        @if (customer.is_invoicesync_working) {
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.PlayCircle())" Color="@Color.Success" Slot="end" Title="çalışıyor" />
                        }
                        else {
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.SubtractCircle())" Color="@Color.Neutral" Slot="end" Title="beklemede" />
                        }
                    }
                </FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="7" Style="text-align:end;padding:5px;">
                <FluentLabel Typo="Typography.H4" Color="Color.Neutral">
                    <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.AppsList())" Slot="start" />
                    XML Senk.:
                </FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="5" Style="text-align:start;padding:5px;">
                <FluentLabel Typo="Typography.H4" Color="@(!customer.order_sync_status ? Color.Disabled : Color.Neutral)" Style="width: 100%;margin:5px 0 5px 0;">
                    @if (!customer.xml_sync_status) {
                        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.PauseCircle())" Color="@Color.Error" Slot="end" Title="durduruldu" />
                    }
                    else {
                        @if (customer.is_xmlsync_working) {
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.PlayCircle())" Color="@Color.Success" Slot="end" Title="çalışıyor" />
                        }
                        else {
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.SubtractCircle())" Color="@Color.Neutral" Slot="end" Title="beklemede" />
                        }
                    }
                </FluentLabel>
            </FluentGridItem>
        </FluentGrid>
        <!-- #endregion -->
        <FluentDivider Style="width: 100%;margin:10px 0 10px 0;" Orientation=Orientation.Horizontal Role="DividerRole.Separator" />
        <FluentButton Type="ButtonType.Button" Appearance="Appearance.Neutral" OnClick="GotoLogs" title="Olay Günlükleri"><FluentIcon Value="@(new Icons.Regular.Size24.ReadingList())" Slot="start" /></FluentButton>&nbsp;&nbsp;
        @if (HttpContextAccessor.HttpContext?.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Role)?.Value == "Admin" && customer.status) {
            @if (server != null) {
                <FluentButton Type="ButtonType.Button" Appearance="Appearance.Neutral" OnClick="@( () => StopServer(server.customer_id))" Loading="@is_refreshing"><FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Stop())" Slot="start" Color="@Color.Error" />Merchanter'ı Durdur</FluentButton>
            }
            else {
                <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent" OnClick="@( () => StartServer(customer.customer_id))" Loading="@is_refreshing"><FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Play())" Slot="start" Color="@Color.Success" />Merchanter'ı Başlat</FluentButton>
            }
        }
    </FluentCard>
}
else {
    <FluentCard class="card-padding" Style="max-width:400px;">
        <FluentSkeleton Style="margin-bottom: 10px;" Width="100%" Height="50px"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px;" Width="100%" Height="30px"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px;" Width="100%" Height="30px"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px;" Width="100%" Height="30px"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px;" Width="100%" Height="10px"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px;" Width="100%" Height="10px"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px;" Width="100%" Height="10px"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px;" Width="100%" Height="10px"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px;" Width="100%" Height="10px"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px;" Width="100%" Height="10px"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px;" Width="100%" Height="10px"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px;" Width="100%" Height="10px"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 10px;" Width="100%" Height="10px"></FluentSkeleton>
        <FluentSkeleton Style="margin-top: 20px;margin-bottom: 10px;" Width="100%" Height="200px"></FluentSkeleton>
    </FluentCard>
}

@code {
    [Parameter]
    public int customer_id { get; set; }
    private MerchanterServer? server { get; set; }
    public Customer? customer { get; set; }
    private string page_message = "";
    private string? message_status = null;
    public bool is_refreshing { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender && HttpContextAccessor.HttpContext != null) {
            await RefreshServers();
            var response = await PostHelper.Request<Customer>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                        Classes.PostHelper.PostMethod.Get, Classes.PostHelper.PostDestination.Api,
                        "api/Customer/" + customer_id.ToString() + "/GetCustomer");
            if (response != null && response.Success && response.Data != null) {
                customer = response.Data;
            }
            StateHasChanged();
        }
    }

    public async Task Refresh() {
        is_refreshing = true;
        StateHasChanged();
        await RefreshServers();
    }

    private async Task RefreshServers() {
        try {
            is_refreshing = true;
            var response = await PostHelper.Request<List<MerchanterServer>>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                        Classes.PostHelper.PostMethod.Get, Classes.PostHelper.PostDestination.Server,
                        "api/Server/GetServers");
            if (response != null && response.Success && response.Data != null) {
                server = response.Data.FirstOrDefault(x => x.customer_id == customer_id);
                if (server == null) {
                    page_message = "Merchanter Server çalışmıyor.";
                }
                else {
                    page_message = string.Empty;
                    customer = server.customer;
                }
                StateHasChanged();
            }
            else {
                page_message = "Merchanter Server ServiceAPI veri alınamadı.";
            }
        }
        catch (Exception ex) {
            Console.WriteLine(ex.Message);
            server = null;
            is_refreshing = false;
        }
        finally {
            is_refreshing = false;
            StateHasChanged();
        }
    }

    private async Task StartServer(int _customer_id) {
        try {
            var response = await PostHelper.Request<MerchanterServer>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                        Classes.PostHelper.PostMethod.Get, Classes.PostHelper.PostDestination.Server,
                        "api/Server/" + _customer_id.ToString() + "/StartServer");
            if (response != null && response.Success && response.Data != null) {
                var started_server = response.Data;
                if (started_server != null) {
                    if (server == null) {
                        server = started_server;
                        customer = server.customer;
                        page_message = "Merchanter Server başlatıldı. " + DateTime.Now.ToString();
                    }
                    else {
                        page_message = "Merchanter Server başlatılamıyor.";
                    }
                }
                else {
                    page_message = "Merchanter Server ServiceAPI veri alınamadı.";
                }
            }
        }
        catch (Exception ex) {
            page_message = "Merchanter Server durdurulamadı. " + ex.Message;
        }
        finally {
            await RefreshServers();
        }
    }

    private async Task StopServer(int _customer_id) {
        try {
            var response = await PostHelper.Request<MerchanterServer>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                            Classes.PostHelper.PostMethod.Get, Classes.PostHelper.PostDestination.Server,
                            "api/Server/" + _customer_id.ToString() + "/StopServer");

            if (response != null && response.Success && response.Data != null) {
                var stopped_server = response.Data;
                if (stopped_server != null) {
                    server = null;
                    customer = stopped_server.customer;
                    page_message = "Merchanter Server durduruldu. " + DateTime.Now.ToString();
                }
                else {
                    page_message = "Merchanter Server ServiceAPI veri alınamadı.";
                }
            }
        }
        catch (Exception ex) {
            page_message = "Merchanter Server durdurulamadı. " + ex.Message;
        }
        finally {
            await RefreshServers();
        }
    }

    #region Navigate
    private void GotoSettings() {
        NavigationManager.NavigateTo("Account/Profile?ActiveTab=settings");
    }

    private void GotoPlatforms() {
        NavigationManager.NavigateTo("Account/Profile?ActiveTab=platforms");
    }

    private void GotoIntegrations() {
        NavigationManager.NavigateTo("Account/Profile?ActiveTab=integrations");
    }

    private void GotoProfile() {
        NavigationManager.NavigateTo("Account/Profile");
    }

    private void GotoNotifications() {
        NavigationManager.NavigateTo("Account/Notifications");
    }

    private void GotoLogs() {
        NavigationManager.NavigateTo("Account/Logs");
    }
    #endregion
}