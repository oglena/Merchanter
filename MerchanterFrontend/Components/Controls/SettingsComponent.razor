@rendermode InteractiveServer
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@inject IHttpContextAccessor HttpContextAccessor
@inject IPostHelper PostHelper

<PageTitle>Hesap > Profil > Ayarlar | Merchanter</PageTitle>

@if (settings != null) {
    <FluentGrid Justify="JustifyContent.SpaceBetween" Spacing="2">
        @if (!string.IsNullOrWhiteSpace(page_message)) {
            <FluentGridItem xs="12">
                <AlertComponent page_message="@page_message" message_status="@message_status" />
            </FluentGridItem>
        }
        <FluentGridItem xs="12">
            <FluentToolbar style="width:100%;border-radius:5px;padding:5px !important;" Orientation="Orientation.Horizontal">
                <FluentIcon Value="@(new Icons.Filled.Size20.Settings())" Slot="start" Color="Color.Accent" />
                <FluentBadge>@section_name</FluentBadge>
                <FluentButton Appearance="Appearance.Outline" Loading="@is_refreshing" OnClick="SaveSettings" IconStart="@(new Icons.Regular.Size20.Save())" Slot="end">Kaydet</FluentButton>
            </FluentToolbar>
        </FluentGridItem>
        <FluentTabs @bind-ActiveTabId="@activeid" OnTabChange="HandleOnTabChange" Width="100%" Style="padding-top:0 !important;">
            <FluentTab Overflow="false" Label="Genel Ayarlar" Icon="@(new Icons.Regular.Size24.Settings())" Id="general-settings">
                <FluentEditForm Model="settings.settings" Style="margin-top:15px;">
                    <FluentGrid Justify="JustifyContent.FlexStart">
                        <FluentGridItem xs="12">
                            <FluentTextField Label="Firma İsmi" @bind-Value="settings.settings.company_name" Required="true">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                            </FluentTextField>
                        </FluentGridItem>
                        <FluentGridItem xs="12">
                            <FluentNumberField @bind-Value="settings.settings.rate_TL" Label="TL (Türk Lirası)" TValue="decimal" Step="0.1" Disabled="true" Required="true">
                                <FluentIcon Value="@(new Icons.Regular.Size16.Money())" Color="@Color.Neutral" Slot="end" />
                            </FluentNumberField>
                        </FluentGridItem>
                        <FluentGridItem xs="12">
                            <FluentNumberField @bind-Value="settings.settings.rate_USD" Label="USD (Amerikan Doları)" TValue="decimal" Step="0.1" Required="true">
                                <FluentIcon Value="@(new Icons.Regular.Size16.CurrencyDollarEuro())" Color="@Color.Neutral" Slot="end" />
                            </FluentNumberField>
                        </FluentGridItem>
                        <FluentGridItem xs="12">
                            <FluentNumberField @bind-Value="settings.settings.rate_EUR" Label="EUR (Euro)" TValue="decimal" Step="0.1" Required="true">
                                <FluentIcon Value="@(new Icons.Regular.Size16.CurrencyDollarEuro())" Color="@Color.Neutral" Slot="end" />
                            </FluentNumberField>
                        </FluentGridItem>
                        <FluentGridItem xs="12">
                        </FluentGridItem>
                    </FluentGrid>
                </FluentEditForm>
            </FluentTab>
            <FluentTab Overflow="false" Label="Ürün Ayarları" Icon="@(new Icons.Regular.Size24.TetrisApp())" Id="product-settings">
                <FluentEditForm Model="settings.product" Style="margin-top:15px;">
                    <FluentGrid Justify="JustifyContent.FlexStart">
                        <FluentGridItem xs="12">
                            <FluentNumberField Label="Kök Kategori Id" @bind-Value="settings.product.customer_root_category_id" Required="true" Disabled="true">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                            </FluentNumberField>
                        </FluentGridItem>
                        <FluentGridItem xs="12">
                            <FluentTextField Label="Varsayılan Marka" @bind-Value="settings.product.default_brand" Required="true" Disabled="true">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                            </FluentTextField>
                        </FluentGridItem>
                        <FluentGridItem xs="12" Justify="JustifyContent.FlexStart">
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.TetrisApp())" />&nbsp;&nbsp;
                            <FluentSwitch @bind-Value="@settings.product.product_list_filter_source_products" Label="Kaynak Bazlı Karşılaştırma">
                                <span slot="checked-message">Açık</span>
                                <span slot="unchecked-message">Kapalı</span>
                            </FluentSwitch>
                        </FluentGridItem>
                        <FluentGridItem xs="12" Justify="JustifyContent.FlexStart">
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.TetrisApp())" />&nbsp;&nbsp;
                            <FluentSwitch @bind-Value="@settings.product.xml_qty_addictive_enable" Label="XML Kaynak Adetleri Toplansın">
                                <span slot="checked-message">Aktif</span>
                                <span slot="unchecked-message">Pasif</span>
                            </FluentSwitch>
                        </FluentGridItem>
                        <FluentGridItem xs="12" Justify="JustifyContent.FlexStart">
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.BarcodeScanner())" />&nbsp;&nbsp;
                            <FluentSwitch @bind-Value="@settings.product.is_barcode_required" Label="Barkod Gerekli Mi ?">
                                <span slot="checked-message">Evet</span>
                                <span slot="unchecked-message">Hayır</span>
                            </FluentSwitch>
                        </FluentGridItem>
                    </FluentGrid>
                </FluentEditForm>
            </FluentTab>
            <FluentTab Overflow="false" Label="Sipariş Ayarları" Icon="@(new Icons.Regular.Size24.ShoppingBag())" Id="order-settings">
                <FluentEditForm Model="settings.order" Style="margin-top:15px;">
                    <FluentGrid Justify="JustifyContent.FlexStart">
                        <FluentGridItem xs="12">
                            <FluentSlider @bind-Value="settings.order.daysto_ordersync" TValue="int" Label="Geriye Dönük Günlük Sipariş Kontrol" Min="3" Max="14" Step="1" ShowValue="true">
                                <FluentSliderLabel Position="3">3</FluentSliderLabel>
                                <FluentSliderLabel Position="7">7</FluentSliderLabel>
                                <FluentSliderLabel Position="10">10</FluentSliderLabel>
                                <FluentSliderLabel Position="14">14</FluentSliderLabel>
                            </FluentSlider>
                        </FluentGridItem>
                        <FluentGridItem xs="12">
                            <FluentTextField Label="Kargo Stok Kodu" @bind-Value="settings.order.siparis_kargo_sku" Required="true">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                            </FluentTextField>
                        </FluentGridItem>
                        <FluentGridItem xs="12">
                            <FluentTextField Label="Sipariş Taksit Komisyon Stok Kodu" @bind-Value="settings.order.siparis_taksitkomisyon_sku" Required="true">
                                <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                            </FluentTextField>
                        </FluentGridItem>
                        <FluentGridItem xs="12" Justify="JustifyContent.FlexStart">
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.ShoppingBag())" />&nbsp;&nbsp;
                            <FluentSwitch @bind-Value="@settings.order.siparis_kdvdahilmi" Label="Sipariş KDV">
                                <span slot="checked-message">Dahil</span>
                                <span slot="unchecked-message">Hariç</span>
                            </FluentSwitch>
                        </FluentGridItem>
                        <FluentGridItem xs="12" Justify="JustifyContent.FlexStart">
                            <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.ShoppingBag())" />&nbsp;&nbsp;
                            <FluentSwitch @bind-Value="@settings.order.is_rewrite_siparis" Label="Sipariş Üzerine Yazılsın Mı ?">
                                <span slot="checked-message">Evet</span>
                                <span slot="unchecked-message">Hayır</span>
                            </FluentSwitch>
                        </FluentGridItem>
                    </FluentGrid>
                </FluentEditForm>
            </FluentTab>
            <FluentTab Overflow="false" Label="Fatura Ayarları" Icon="@(new Icons.Regular.Size24.DocumentOnePage())" Id="invoice-settings">
                @if (settings.invoice != null) {
                    <FluentEditForm Model="settings.invoice" Style="margin-top:15px;">
                        <FluentGrid Justify="JustifyContent.FlexStart">
                            <FluentGridItem xs="12">
                                <FluentSlider @bind-Value="settings.invoice.daysto_invoicesync" TValue="int" Label="Geriye Dönük Günlük Fatura Kontrol" Min="3" Max="14" Step="1" ShowValue="true">
                                    <FluentSliderLabel Position="3">3</FluentSliderLabel>
                                    <FluentSliderLabel Position="7">7</FluentSliderLabel>
                                    <FluentSliderLabel Position="10">10</FluentSliderLabel>
                                    <FluentSliderLabel Position="14">14</FluentSliderLabel>
                                </FluentSlider>
                            </FluentGridItem>
                            <FluentGridItem xs="12">
                                <FluentTextField TextFieldType="TextFieldType.Url" Label="Fatura FTP Url (eski değişecek)" @bind-Value="settings.invoice.erp_invoice_ftp_url" Required="true">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                                </FluentTextField>
                            </FluentGridItem>
                            <FluentGridItem xs="12">
                                <FluentTextField Label="Fatura FTP Kullanıcı Adı (eski değişecek)" @bind-Value="settings.invoice.erp_invoice_ftp_username" Required="true">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                                </FluentTextField>
                            </FluentGridItem>
                            <FluentGridItem xs="12">
                                <FluentTextField TextFieldType="TextFieldType.Password" Label="Fatura FTP Şifre (eski değişecek)" @bind-Value="settings.invoice.erp_invoice_ftp_password" Required="true">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                                </FluentTextField>
                            </FluentGridItem>
                        </FluentGrid>
                    </FluentEditForm>
                }
            </FluentTab>
            <FluentTab Overflow="false" Label="Mail Ayarları (google)" Icon="@(new Icons.Regular.Size24.Settings())" Id="google-settings">
                @if (settings.google != null) {
                    <FluentEditForm Model="settings.google" Style="margin-top:15px;">
                        <FluentGrid Justify="JustifyContent.FlexStart">
                            <FluentGridItem xs="12" Justify="JustifyContent.FlexStart">
                                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Mail())" />&nbsp;&nbsp;
                                <FluentSwitch @bind-Value="@settings.google.is_enabled" Label="Mail Sistemi">
                                    <span slot="checked-message">Aktif</span>
                                    <span slot="unchecked-message">Pasif</span>
                                </FluentSwitch>
                            </FluentGridItem>
                            <FluentGridItem xs="12">
                                <FluentTextField Label="Gönderen İsmi" @bind-Value="settings.google.sender_name" Required="true">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                                </FluentTextField>
                            </FluentGridItem>
                            <FluentGridItem xs="12">
                                <FluentTextField TextFieldType="TextFieldType.Email" Label="Email Adres" @bind-Value="settings.google.email" Required="true">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.MailEdit())" Color="@Color.Neutral" Slot="start" />
                                </FluentTextField>
                            </FluentGridItem>
                            <FluentGridItem xs="12">
                                <FluentTextField Label="oAuth2 Client Id" @bind-Value="settings.google.oauth2_clientid" Required="true">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                                </FluentTextField>
                            </FluentGridItem>
                            <FluentGridItem xs="12">
                                <FluentTextField TextFieldType="TextFieldType.Password" Label="oAuth2 Client Secret" @bind-Value="settings.google.oauth2_clientsecret" Required="true">
                                    <FluentIcon Value="@(new Icons.Regular.Size20.Password())" Color="@Color.Neutral" Slot="start" />
                                </FluentTextField>
                            </FluentGridItem>
                        </FluentGrid>
                    </FluentEditForm>
                }
            </FluentTab>
        </FluentTabs>
    </FluentGrid>
}
else {
    <FluentProgress Width="100%" Stroke="ProgressStroke.Small"></FluentProgress>
}

@code {
    [Parameter]
    public int customer_id { get; set; }
    public bool is_refreshing = false;
    private string loading = "Loading...";
    private string? page_message = "";
    private string? message_status = "";
    private string section_name = "Genel Ayarlar";
    private Customer? customer { get; set; }
    private SettingsMerchanter? settings { get; set; }

    private string? activeid = "general-settings";
    private FluentTab? changedto;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            if (changedto != null) {
                activeid = changedto.Id;
                changedto = null;
            }
            await LoadCustomerSettings();
        }
    }

    protected async Task LoadCustomerSettings() {
        var response = await PostHelper.Request<SettingsMerchanter>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
            Classes.PostHelper.PostMethod.Get, Classes.PostHelper.PostDestination.Api,
        "api/Settings/" + customer_id.ToString() + "/GetCustomerSettings");

        if (response != null && response.Success && response.Data != null) {
            settings = response.Data;
            page_message = string.Empty;
            StateHasChanged();
        }
        else {
            page_message = "Merchanter Server ServiceAPI yanıt vermiyor.";
            message_status = "dev";
        }
    }

    protected async Task LoadCustomer() {
        customer = null;
        var response = await PostHelper.Request<Customer>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
            Classes.PostHelper.PostMethod.Get, Classes.PostHelper.PostDestination.Api,
        "api/Customer/" + customer_id.ToString() + "/GetCustomer");

        if (response != null && response.Success && response.Data != null) {
            customer = response.Data;
            StateHasChanged();
        }
        else {
            page_message = "Merchanter Server ServiceAPI yanıt vermiyor.";
            message_status = "dev";
        }
    }

    protected async Task SaveSettings() {
        if (activeid == "general-settings") {
            page_message = "Genel ayarlar kaydediliyor...";
            message_status = "dev";
            if (settings != null && settings.settings != null) {
                await SaveGeneralSettings(settings.settings);
            }
        }
        if (activeid == "product-settings") {
            page_message = "Ürün ayarları kaydediliyor...";
            message_status = "dev";
            if (settings != null && settings.product != null) {
                await SaveProductSettings(settings.product);
            }
        }
        if (activeid == "order-settings") {
            page_message = "Sipariş ayarları kaydediliyor...";
            message_status = "dev";
            if (settings != null && settings.order != null) {
                await SaveOrderSettings(settings.order);
            }
        }
        if (activeid == "invoice-settings") {
            page_message = "Fatura ayarları kaydediliyor...";
            message_status = "dev";
            if (settings != null && settings.invoice != null) {
                await SaveInvoiceSettings(settings.invoice);
            }
        }
        if (activeid == "google-settings") {
            page_message = "Google ayarları kaydediliyor...";
            message_status = "dev";
            if (settings != null && settings.google != null) {
                await SaveGoogleSettings(settings.google);
            }
        }
        await Task.CompletedTask;
    }

    protected async Task SaveGeneralSettings(SettingsGeneral _settings) {
        if (settings != null && settings.settings != null) {
            is_refreshing = true;
            string json = JsonConvert.SerializeObject(_settings);
            var response = await PostHelper.Request<SettingsGeneral>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Put, Classes.PostHelper.PostDestination.Api,
                "api/Settings/" + customer_id + "/SaveGeneralSettings",
                new StringContent(json, Encoding.UTF8, "application/json"));

            if (response != null && response.Success && response.Data != null) {
                settings.settings = response.Data;
                page_message = "[" + DateTime.Now.ToString() + "] Genel ayarlar kaydedildi.";
                message_status = "işlem başarılı";
            }
            else {
                page_message = "[" + DateTime.Now.ToString() + "] Genel ayarlar kaydedilemedi. ";
                message_status = "işlem başarısız";
            }
            is_refreshing = false;
        }
    }

    protected async Task SaveOrderSettings(SettingsOrder _settings) {
        if (settings != null && settings.order != null) {
            is_refreshing = true;
            string json = JsonConvert.SerializeObject(_settings);
            var response = await PostHelper.Request<SettingsOrder>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Put, Classes.PostHelper.PostDestination.Api,
                "api/Settings/" + customer_id + "/SaveOrderSettings",
                new StringContent(json, Encoding.UTF8, "application/json"));
            if (response != null && response.Success && response.Data != null) {
                settings.order = response.Data;
                page_message = "[" + DateTime.Now.ToString() + "] Sipariş ayarları kaydedildi.";
                message_status = "işlem başarılı";
            }
            else {
                page_message = "[" + DateTime.Now.ToString() + "] Sipariş ayarları kaydedilemedi. ";
                message_status = "işlem başarısız";
            }
            is_refreshing = false;
        }
    }

    protected async Task SaveProductSettings(SettingsProduct _settings) {
        if (settings != null && settings.product != null) {
            is_refreshing = true;
            string json = JsonConvert.SerializeObject(_settings);
            var response = await PostHelper.Request<SettingsProduct>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Put, Classes.PostHelper.PostDestination.Api,
                "api/Settings/" + customer_id + "/SaveProductSettings",
                new StringContent(json, Encoding.UTF8, "application/json"));
            if (response != null && response.Success && response.Data != null) {
                settings.product = response.Data;
                page_message = "[" + DateTime.Now.ToString() + "] Ürün ayarları kaydedildi.";
                message_status = "işlem başarılı";
            }
            else {
                page_message = "[" + DateTime.Now.ToString() + "] Ürün ayarları kaydedilemedi. ";
                message_status = "işlem başarısız";
            }
            is_refreshing = false;
        }
    }

    protected async Task SaveInvoiceSettings(SettingsInvoice _settings) {
        if (settings != null && settings.invoice != null) {
            is_refreshing = true;
            string json = JsonConvert.SerializeObject(_settings);
            var response = await PostHelper.Request<SettingsInvoice>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Put, Classes.PostHelper.PostDestination.Api,
                "api/Settings/" + customer_id + "/SaveInvoiceSettings",
                new StringContent(json, Encoding.UTF8, "application/json"));
            if (response != null && response.Success && response.Data != null) {
                settings.invoice = response.Data;
                page_message = "[" + DateTime.Now.ToString() + "] Fatura ayarları kaydedildi.";
                message_status = "işlem başarılı";
            }
            else {
                page_message = "[" + DateTime.Now.ToString() + "] Fatura ayarları kaydedilemedi. ";
                message_status = "işlem başarısız";
            }
            is_refreshing = false;
        }
    }

    protected async Task SaveGoogleSettings(SettingsGoogle _settings) {
        if (settings != null && settings.google != null) {
            is_refreshing = true;
            string json = JsonConvert.SerializeObject(_settings);
            var response = await PostHelper.Request<SettingsGoogle>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Put, Classes.PostHelper.PostDestination.Api,
                "api/Settings/" + customer_id + "/SaveGoogleSettings",
                new StringContent(json, Encoding.UTF8, "application/json"));
            if (response != null && response.Success && response.Data != null) {
                settings.google = response.Data;
                page_message = "[" + DateTime.Now.ToString() + "] Google ayarları kaydedildi.";
                message_status = "işlem başarılı";
            }
            else {
                page_message = "[" + DateTime.Now.ToString() + "] Google ayarları kaydedilemedi. ";
                message_status = "işlem başarısız";
            }
            is_refreshing = false;
        }
    }

    private void HandleOnTabChange(FluentTab tab) {
        changedto = tab;
        if (tab != null) {
            if (tab.Id == "general-settings") {
                section_name = "Genel Ayarlar";
            }
            if (tab.Id == "product-settings") {
                section_name = "Ürün Ayarları";
            }
            if (tab.Id == "order-settings") {
                section_name = "Sipariş Ayarları";
            }
            if (tab.Id == "invoice-settings") {
                section_name = "Fatura Ayarları";
            }
            if (tab.Id == "google-settings") {
                section_name = "Mail Ayarları (google)";
            }
        }
        // page_message = tab.Id;
        // message_status = "dev_message";
    }
}
