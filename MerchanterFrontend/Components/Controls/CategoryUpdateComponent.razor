@rendermode InteractiveServer
@using MerchanterFrontend.Components.Pages.Catalog
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@inject IPostHelper PostHelper
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<FluentGrid Justify="JustifyContent.SpaceBetween" Spacing="2">
    @if (!string.IsNullOrWhiteSpace(page_message)) {
        <FluentGridItem xs="12">
            <AlertComponent page_message="@page_message" message_status="@message_status" />
        </FluentGridItem>
    }
    <FluentGridItem xs="12">
        <FluentToolbar style="width:100%;border-radius:5px;padding:5px !important;" Orientation="Orientation.Horizontal">
            <FluentIcon Value="@(new Icons.Filled.Size20.TextBulletListSquare())" Slot="start" Color="Color.Accent" />
            @if (SelectedCategory != null && ParentCategory != null) {
                <FluentButton Appearance="Appearance.Outline" OnClick="NewCategoryMode" IconStart="@(new Icons.Regular.Size20.New())">Yeni Alt Kategori</FluentButton>
                <FluentButton Appearance="Appearance.Outline" OnClick="DeleteCategory" IconStart="@(new Icons.Regular.Size20.Delete())" Style="margin-right:10px;" slot="end">Sil</FluentButton>
                <FluentButton Appearance="Appearance.Outline" OnClick="UpdateCategory" IconStart="@(new Icons.Regular.Size20.Save())" slot="end">Güncelle</FluentButton>
                <FluentBadge><b>Id:</b>&nbsp;@SelectedCategory.id</FluentBadge>
            }
            else if (SelectedCategory == null && ParentCategory != null) {
                <FluentButton Appearance="Appearance.Outline" OnClick="NewCategory" IconStart="@(new Icons.Regular.Size20.Save())" slot="end">Yeni Kategori Kaydet</FluentButton>
            }
            else {
                <FluentButton Appearance="Appearance.Outline" OnClick="NewCategoryMode" IconStart="@(new Icons.Regular.Size20.New())">Yeni Alt Kategori</FluentButton>
            }
        </FluentToolbar>
    </FluentGridItem>
    <FluentGridItem xs="12">
        @if (SelectedCategory != null && ParentCategory != null) {
            <FluentLabel Typo="Typography.H2" Color="Color.Accent">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.Edit())" Slot="start" />
                Kategori düzenleniyor:&nbsp;<b>@SelectedCategory.category_name</b></FluentLabel>
        }
        else if (SelectedCategory == null && ParentCategory != null) {
            <FluentLabel Typo="Typography.H2" Color="Color.Accent">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.New())" Slot="start" />
                <b>@ParentCategory.category_name</b> için yeni alt kategori oluşturuluyor</FluentLabel>
        }
        else {
            <FluentLabel Typo="Typography.H2" Color="Color.Accent">Lütfen bir <b>kategori</b> seçin!</FluentLabel>
        }
    </FluentGridItem>
    @if (SelectedCategory != null && ParentCategory != null) {
        <FluentGridItem xs="12">
            <FluentEditForm FormName="edit_category" Model="SelectedCategory" Style="margin-top:15px;">
                <FluentGrid Justify="JustifyContent.FlexStart">
                    <FluentGridItem xs="12">
                        <FluentNumberField @bind-Value="@(SelectedCategory.source_category_id)" Label="Kaynak Kategori Id" Disabled="true"></FluentNumberField>
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <FluentTextField Label="Üst Kategori" @bind-Value="ParentCategory.category_name" Required="true" Disabled="true">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                        </FluentTextField>
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <FluentTextField Label="Kategori İsmi" @bind-Value="SelectedCategory.category_name" Required="true">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                        </FluentTextField>
                    </FluentGridItem>
                    <FluentGridItem xs="12" Justify="JustifyContent.FlexStart">
                        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Status())" />&nbsp;&nbsp;
                        <FluentSwitch @bind-Value="@SelectedCategory.is_active" Label="Kategori Durumu">
                            <span slot="checked-message">Aktif</span>
                            <span slot="unchecked-message">Pasif</span>
                        </FluentSwitch>
                    </FluentGridItem>
                </FluentGrid>
            </FluentEditForm>
        </FluentGridItem>
        @if (CategoryTargets != null && CategoryTargets.Count > 0) {
            <FluentDivider Style="width:100%;" />
            <FluentGridItem xs="12">
                <FluentLabel Typo="Typography.H2" Color="Color.Accent">
                    <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size24.PlugConnected())" Slot="start" />
                    Hedef Kategoriler
                </FluentLabel>
            </FluentGridItem>
            <FluentGridItem xs="12" Style="display:contents;">
                @foreach (var item in CategoryTargets) {
                    <FluentGridItem lg="3" md="4" xs="6" Style="@("margin:5px;border:1px dashed " + (item.sync_status == Target.SyncStatus.Synced ? "green" : "var(--accent-fill-rest)" ) + ";border-radius:3px;padding:5px;")">
                        <FluentGridItem xs="12" Justify="JustifyContent.Center">
                            <span>@item.update_date.ToString("dd.MM.yyyy HH:mm:ss")</span>
                        </FluentGridItem>
                        <FluentGridItem xs="12" Justify="JustifyContent.Center">
                            <img style="width:125px;padding:15px;"
                                 src="@(@"media\platform_logos\" + item.target_name + ".png")"
                                 alt="@item.target_name" />
                        </FluentGridItem>
                        <FluentGridItem xs="12" Justify="JustifyContent.Center" Style="height:30px;">
                            <FluentBadge Appearance="Appearance.Neutral">
                                @switch (item.sync_status) {
                                    case Target.SyncStatus.Synced:
                                        <span style="color:green;">Senkron Edildi</span>
                                        break;
                                    case Target.SyncStatus.NotSynced:
                                        <span style="color:var(--accent-fill-rest);">Senkron Edilecek</span>
                                        break;
                                    case Target.SyncStatus.Error:
                                        <span style="color:red;">Hata Oluştu</span>
                                        break;
                                }
                            </FluentBadge>
                        </FluentGridItem>
                        <FluentGridItem xs="12" Justify="JustifyContent.Center" Style="height:30px;">
                            <FluentBadge Appearance="Appearance.Accent">@item.target_id</FluentBadge>
                        </FluentGridItem>
                        @{
                            if (item.target_name == Constants.N11) {
                                <FluentGridItem xs="12" Justify="JustifyContent.Center" Style="height:30px;">
                                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Accent">
                                        <span>@GetN11CategoryName(item.target_id)</span>
                                    </FluentLabel>
                                </FluentGridItem>
                            }
                            else if (item.target_name == Constants.IDEASOFT) {
                                <FluentGridItem xs="12" Justify="JustifyContent.Center" Style="height:30px;">
                                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Accent">
                                        <span>@item.target_id</span>(nyd)
                                    </FluentLabel>
                                </FluentGridItem>
                            }
                            else if (item.target_name == Constants.MAGENTO2) {
                                <FluentGridItem xs="12" Justify="JustifyContent.Center" Style="height:30px;">
                                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Accent">
                                        <span>@item.target_id</span>(nyd)
                                    </FluentLabel>
                                </FluentGridItem>
                            }
                        }
                    </FluentGridItem>
                }
            </FluentGridItem>
        }
    }
    else if (SelectedCategory == null && ParentCategory != null) {
        <FluentGridItem xs="12">
            <FluentEditForm FormName="new_category" Model="DummyCategory" Style="margin-top:15px;">
                <FluentGrid Justify="JustifyContent.FlexStart">
                    <FluentGridItem xs="12">
                        <FluentNumberField @bind-Value="@(DummyCategory.source_category_id)" Label="Kaynak Kategori Id" Disabled="true"></FluentNumberField>
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <FluentTextField Label="Üst Kategori" @bind-Value="ParentCategory.category_name" Required="true" Disabled="true">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                        </FluentTextField>
                    </FluentGridItem>
                    <FluentGridItem xs="12">
                        <FluentTextField Label="Kategori İsmi" @bind-Value="DummyCategory.category_name" Required="true">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Edit())" Color="@Color.Neutral" Slot="start" />
                        </FluentTextField>
                    </FluentGridItem>
                    <FluentGridItem xs="12" Justify="JustifyContent.FlexStart">
                        <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.Status())" />&nbsp;&nbsp;
                        <FluentSwitch @bind-Value="@DummyCategory.is_active" Label="Kategori Durumu">
                            <span slot="checked-message">Aktif</span>
                            <span slot="unchecked-message">Pasif</span>
                        </FluentSwitch>
                    </FluentGridItem>
                </FluentGrid>
            </FluentEditForm>
        </FluentGridItem>
    }
</FluentGrid>

@code {
    [Parameter]
    public int customer_id { get; set; } = 0;
    [Parameter]
    public Func<Task> OnRefresh { get; set; } = default!;
    public bool is_refreshing { get; set; } = false;
    private bool loading_categories = false;
    private string? page_message = "";
    private string? message_status = "";
    public Category? SelectedCategory { get; set; } = null;
    public Category? ParentCategory { get; set; } = null;
    private Category DummyCategory { get; set; } = new Category();
    private List<CategoryTarget>? CategoryTargets { get; set; } = null;
    private N11_Categories? n11_categories { get; set; } = null;

    protected override async Task OnParametersSetAsync() {
        if (SelectedCategory != null) {
            var response = await PostHelper.Request<List<CategoryTarget>>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Get, Classes.PostHelper.PostDestination.Api,
                "api/Category/GetCategoryTargets/" + SelectedCategory.id, null);
            if (response != null && response.Success && response.Data != null) {
                CategoryTargets = response.Data;
                loading_categories = true;
                if (CategoryTargets != null && CategoryTargets.Count > 0) {
                    var n11_response = await PostHelper.Request<N11_Categories?>(null, Classes.PostHelper.PostMethod.Local,
                        Classes.PostHelper.PostDestination.Local, "n11/categories.json", null);
                    if (n11_response != null && n11_response.Success && n11_response.Data != null) {
                        n11_categories = n11_response.Data;
                    }
                }
                else {
                    CategoryTargets = new List<CategoryTarget>();
                }
                loading_categories = false;
            }
        }
    }

    public async Task Refresh(Category? _category, Category? _parent) {
        page_message = "";
        message_status = "";
        SelectedCategory = _category;
        ParentCategory = _parent;
        await Task.CompletedTask;
        StateHasChanged();
    }

    public async Task NewCategoryMode() {
        if (SelectedCategory != null) {
            page_message = "";
            message_status = "";
            if (SelectedCategory.parent_id == 1)
                SelectedCategory.category_name = "Ana Kategori";
            await Refresh(null, SelectedCategory);
        }
        else
            await Refresh(null, await GetDefaultCategory());
    }

    private async Task UpdateCategory() {
        try {
            if (SelectedCategory != null && ParentCategory != null) {
                var response = await PostHelper.Request<Category?>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                    Classes.PostHelper.PostMethod.Put, Classes.PostHelper.PostDestination.Api,
                    "api/Category/SaveCategory",
                    new StringContent(JsonConvert.SerializeObject(SelectedCategory), Encoding.UTF8, "application/json")
                );
                if (response != null && response.Success && response.Data != null) {
                    SelectedCategory = response.Data;
                    page_message = "[" + DateTime.Now.ToString() + "] Kategori güncellendi.";
                    message_status = "işlem başarılı";
                    await Refresh(SelectedCategory, ParentCategory);
                    if (OnRefresh != null) {
                        await OnRefresh.Invoke();
                    }
                }
                else {
                    page_message = "[" + DateTime.Now.ToString() + "] Kategori güncellenemedi.";
                    message_status = "işlem başarısız";
                }
            }
        }
        catch (Exception ex) {
            Trace.WriteLine(ex.Message);
            page_message = "[" + DateTime.Now.ToString() + "] Kategori güncellenemedi. Hata: " + ex.Message;
            message_status = "işlem başarısız";
        }
    }

    private async Task NewCategory() {
        try {
            if (DummyCategory != null && ParentCategory != null) {
                DummyCategory.parent_id = ParentCategory.id;
                DummyCategory.customer_id = customer_id;
                var response = await PostHelper.Request<Category?>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                    Classes.PostHelper.PostMethod.Put, Classes.PostHelper.PostDestination.Api,
                    "api/Category/SaveCategory",
                    new StringContent(JsonConvert.SerializeObject(DummyCategory), Encoding.UTF8, "application/json")
                );
                if (response != null && response.Success && response.Data != null) {
                    SelectedCategory = response.Data;
                    page_message = "[" + DateTime.Now.ToString() + "] Kategori kaydedildi.";
                    message_status = "işlem başarılı";
                    await Refresh(SelectedCategory, ParentCategory);
                    DummyCategory = new Category();
                    if (OnRefresh != null) {
                        await OnRefresh.Invoke();
                    }
                }
                else {
                    page_message = "[" + DateTime.Now.ToString() + "] Kategori kaydedilemedi.";
                    message_status = "işlem başarısız";
                }
            }
        }
        catch (Exception ex) {
            Trace.WriteLine(ex.Message);
            page_message = "[" + DateTime.Now.ToString() + "] Kategori kaydedilemedi. Hata: " + ex.Message;
            message_status = "işlem başarısız";
        }
    }

    private async Task DeleteCategory() {
        try {
            var dialog = await DialogService.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>() {
                    Content = new() {
                        Title = "Emin Misiniz ?",
                        MarkupMessage = new MarkupString("Seçtiğiniz <strong>kategori</strong> siliniyor."),
                        Icon = new Icons.Regular.Size24.Delete(),
                        IconColor = Color.Error,
                    },
                    PrimaryAction = "Sil",
                    SecondaryAction = "İptal",
                    Width = "250px",
                });
            var result = await dialog.Result;
            if (!result.Cancelled) {
                if (SelectedCategory != null) {
                    var response = await PostHelper.Request<bool>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                        Classes.PostHelper.PostMethod.Delete, Classes.PostHelper.PostDestination.Api,
                        "api/Category/DeleteCategory",
                        new StringContent(JsonConvert.SerializeObject(SelectedCategory), Encoding.UTF8, "application/json")
                    );
                    if (response != null && response.Success && response.Data) {
                        SelectedCategory = null;
                        ParentCategory = null;
                        page_message = "[" + DateTime.Now.ToString() + "] Kategori silindi.";
                        message_status = "işlem başarılı";
                        await Refresh(null, null);
                        if (OnRefresh != null) {
                            await OnRefresh.Invoke();
                        }
                    }
                    else {
                        page_message = "[" + DateTime.Now.ToString() + "] Kategori silinemedi.";
                        message_status = "işlem başarısız";
                    }
                }
            }
        }
        catch (Exception ex) {
            Trace.WriteLine(ex.Message);
            page_message = "[" + DateTime.Now.ToString() + "] Kategori silinemedi. Hata: " + ex.Message;
            message_status = "işlem başarısız";
        }
    }

    protected async Task<Category?> GetDefaultCategory() {
        try {
            var response = await PostHelper.Request<Category>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Get, Classes.PostHelper.PostDestination.Api,
                "api/Category/GetDefaultCategory", null);
            if (response != null && response.Success && response.Data != null) {
                response.Data.category_name = "Ana Kategori";
                return response.Data;
            }
            return null;
        }
        catch (Exception ex) {
            Trace.WriteLine(ex.Message);
            page_message = "[" + DateTime.Now.ToString() + "] Ana kategori alınamadı. Hata: " + ex.Message;
            message_status = "işlem başarısız";
            return null;
        }
    }

    private string GetN11CategoryName(int id) {
        if (n11_categories != null) {
            var category = FindN11CategoryById(id, n11_categories.categories);
            if (category != null) {
                return category.name;
            }
        }
        return string.Empty;
    }

    private N11_Category? FindN11CategoryById(int id, N11_Category[] categories) {
        foreach (var cat in categories) {
            if (cat.id == id)
                return cat;
            if (cat.subCategories != null && cat.subCategories.Length > 0) {
                var found = FindN11CategoryByIdInSubcategories(id, cat.subCategories);
                if (found != null)
                    return found;
            }
        }
        return null;
    }

    private N11_Category? FindN11CategoryByIdInSubcategories(int id, N11_Subcategory[] subCategories) {
        foreach (var subCat in subCategories) {
            if (subCat.id == id) {
                // Map N11_Subcategory to N11_Category
                return new N11_Category {
                        id = subCat.id,
                        parentId = subCat.parentId,
                        name = subCat.name,
                        subCategories = subCat.subCategories
                    };
            }
            if (subCat.subCategories != null && subCat.subCategories.Length > 0) {
                var found = FindN11CategoryByIdInSubcategories(id, subCat.subCategories);
                if (found != null)
                    return found;
            }
        }
        return null;
    }
}
