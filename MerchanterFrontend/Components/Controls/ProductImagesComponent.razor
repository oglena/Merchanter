@rendermode InteractiveServer
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@inject IPostHelper PostHelper
@inject IHttpContextAccessor HttpContextAccessor

<FluentGridItem xs="12" Style="display:contents;">
    <FluentGridItem xs="12" Style="width:100%;height:30px;">
    </FluentGridItem>
    @if (product_images.Count > 0) {
        @foreach (var item in product_images) {
            <FluentGridItem lg="3" md="4" xs="6" Style="@("margin:5px;border:1px dashed " + (item.id > 0 ? "var(--accent-fill-rest)" : "red") + ";border-radius:3px;")">
                <FluentGridItem xs="12" Justify="JustifyContent.Center">
                    <img style="width:250px;padding:15px;"
                         src="@(@"media\catalog\product\" + item.image_url )"
                         alt="@(Path.GetFileNameWithoutExtension(item.image_name))" />
                </FluentGridItem>
                <FluentDivider Style="max-width:100%;margin-top:0 !important;" />
                <FluentGridItem xs="12" Justify="JustifyContent.Center">
                    <span>@item.image_name</span>
                </FluentGridItem>
                <FluentGridItem xs="12" Justify="JustifyContent.Center" Style="height:30px;">
                    <FluentBadge Appearance="Appearance.Accent">Tip:&nbsp;@item.type.ToString().ToUpper()</FluentBadge>
                    @if (item.is_default) {
                        <span>&nbsp;&nbsp;</span>
                        <FluentBadge Appearance="Appearance.Accent">KAPAK</FluentBadge>
                    }
                </FluentGridItem>
                <FluentGridItem xs="12" Justify="JustifyContent.Center">
                    <FluentButton Id="@("image-delete-button" + item.image_name)" Appearance="Appearance.Outline" OnClick="@(() => item.id = 0)" IconStart="@(new Icons.Regular.Size12.Delete())" Style="margin:5px;" />
                    @if (item.id > 0) {
                        <FluentTooltip AutoUpdateMode="AutoUpdateMode.Anchor" Anchor="@("image-delete-button" + item.image_name)" Position="TooltipPosition.Bottom">
                            <span>Resmi<i> silinmesi</i> için hazırla.</span>
                        </FluentTooltip>
                    }
                    else {
                        <FluentTooltip AutoUpdateMode="AutoUpdateMode.Anchor" Anchor="@("image-delete-button" + item.image_name)" Position="TooltipPosition.Bottom">
                            <span>Resim kaydedilirken <i>silinecek.</i></span>
                        </FluentTooltip>
                    }
                    @if (!item.is_default) {
                        <FluentButton Id="@("image-makedefault-button" + item.image_name)" OnClick="@(() => MakeDefaultImage(item.id))" Appearance="Appearance.Outline" IconStart="@(new Icons.Regular.Size12.CheckmarkCircle())" Style="margin:5px;" />
                        <FluentTooltip AutoUpdateMode="AutoUpdateMode.Anchor" Anchor="@("image-makedefault-button" + item.image_name)" Position="TooltipPosition.Bottom">
                            <i>KAPAK</i> resmi yap.
                        </FluentTooltip>
                    }
                </FluentGridItem>
            </FluentGridItem>
        }
    }

    @if (Files.Any() && !string.IsNullOrWhiteSpace(username)) {
        @foreach (var file in Files) {
            <FluentGridItem lg="3" md="4" xs="6" Style="margin:5px;border:1px dashed green;border-radius:3px;">
                <FluentGridItem xs="12" Justify="JustifyContent.Center">
                    <img style="max-width:250px;padding:15px;"
                         src="@file.Value.Replace(@"wwwroot\",string.Empty)"
                         alt="@(Path.GetFileNameWithoutExtension(file.Key))" />
                </FluentGridItem>
                <FluentDivider Style="width:100%;margin-top:0 !important;" />
                <FluentGridItem xs="12" Justify="JustifyContent.Center">
                    <span>@file.Key</span>
                </FluentGridItem>
                <FluentGridItem xs="12" Justify="JustifyContent.Center" Style="height:30px;">
                    <FluentBadge Appearance="Appearance.Accent">Tip:&nbsp;@ImageTypes.url.ToString().ToUpper()</FluentBadge>
                </FluentGridItem>
                <FluentGridItem xs="12" Justify="JustifyContent.Center">
                    <FluentButton Id="@("image-delete-temp-button" + file.Key)" Appearance="Appearance.Outline" OnClick="@(() => DeleteTempImage(file.Key))" IconStart="@(new Icons.Regular.Size12.Delete())" Style="margin:5px;" />
                    <FluentTooltip AutoUpdateMode="AutoUpdateMode.Anchor" Anchor="@("image-delete-temp-button" + file.Key)" Position="TooltipPosition.Bottom">
                        <span>Resmi<i> sil.</i></span>
                    </FluentTooltip>
                </FluentGridItem>
            </FluentGridItem>
        }
    }
</FluentGridItem>

<FluentGridItem xs="12">
    <FluentInputFile @ref="@ProductImageByStream"
                     Id="product-image-uploader"
                     DragDropZoneVisible="true"
                     Mode="InputFileMode.Stream"
                     Multiple="true"
                     MaximumFileCount="10"
                     MaximumFileSize="@(10*1024*1024)"
                     Accept="image/*"
                     @bind-ProgressPercent="@ProgressPercent"
                     OnFileUploaded="@OnFileUploadedAsync"
                     OnCompleted="@OnCompleted">
        <ChildContent>
            <label for="product-image-uploader" style="margin-top:10px;">
                <FluentIcon Value="@(new @Icons.Regular.Size24.ArrowUpload())" />
            </label>
            <div>
                Resimlerinizi(<label>max:10MB</label>) yüklemek için buraya sürükleyin,
                veya <label for="product-image-uploader">göz atın</label>
                ve seçin<span style="color: red;">*</span>.
                <br />
                <em>En fazla 10 resim yükleyebilirsiniz.</em>
            </div>
        </ChildContent>
        <ProgressTemplate>
            <FluentProgress Width="100%" Stroke="ProgressStroke.Small" Value="@ProgressPercent" />
            <FluentLabel Typo="Typography.Body" Color="Color.Accent">
                @($"{ProgressPercent}%")
            </FluentLabel>
        </ProgressTemplate>
    </FluentInputFile>
</FluentGridItem>

@code {
    [Parameter]
    public List<ProductImage> product_images { get; set; }
    [Parameter]
    public string sku { get; set; }
    public string? username = null;

    private int ProgressPercent = 0;
    string? progressTitle;
    private FluentInputFile? ProductImageByStream = default!;
    Dictionary<string, string> Files = new();

    protected override void OnParametersSet() {
        username = HttpContextAccessor.HttpContext?.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Name)?.Value;
    }

    private async Task OnFileUploadedAsync(FluentInputFileEventArgs file) {
        try {
            ProgressPercent = file.ProgressPercent;
            progressTitle = file.ProgressTitle;
            if (!string.IsNullOrWhiteSpace(username)) {
                // Check if the folder is exists, if not create it
                var tempPath = Path.Combine("wwwroot", "temp", username, sku);
                if (!Directory.Exists(tempPath)) {
                    Directory.CreateDirectory(tempPath);
                }
                var localFile = Path.Combine("wwwroot", "temp", username, sku, file.Name);

                await using FileStream fs = new(localFile, FileMode.Create);
                await file.Stream!.CopyToAsync(fs);
                await file.Stream!.DisposeAsync();
                Files.Add(file.Name, localFile);
            }
        }
        catch (Exception ex) {
            Trace.WriteLine(ex.Message);
        }
    }

    private void OnCompleted(IEnumerable<FluentInputFileEventArgs> files) {
        ProgressPercent = ProductImageByStream!.ProgressPercent;
        progressTitle = ProductImageByStream!.ProgressTitle;
    }

    private void MakeDefaultImage(int imageId) {
        foreach (var img in product_images) {
            img.is_default = img.id == imageId;
        }
    }

    private void DeleteTempImage(string fileName) {
        if (Files.ContainsKey(fileName)) {
            try {
                var filePath = Files[fileName];
                if (File.Exists(filePath)) {
                    File.Delete(filePath);
                }
                Files.Remove(fileName);
            }
            catch (Exception ex) {
                Trace.WriteLine($"Error deleting image: {ex.Message}");
            }
        }
    }
}
