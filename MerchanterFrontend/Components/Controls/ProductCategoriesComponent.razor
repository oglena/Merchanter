@rendermode InteractiveServer
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@inject IPostHelper PostHelper
@inject IHttpContextAccessor HttpContextAccessor

@if (!loading && categories != null) {
    <FluentGrid Justify="JustifyContent.SpaceBetween" Spacing="2">
        <FluentGridItem xs="12">
            <FluentTreeView Items="@Items?.AsQueryable()" LazyLoadItems="true">
                <ItemTemplate>
                    <FluentCheckbox Value="@(SelectedItems.Contains(context))"
                                    ValueChanged="@(e => CheckboxHandler(e, context))"
                                    Style="margin-right: 12px;">
                        @context.Text
                        <span style="color: var(--accent-fill-rest); margin: 0 4px;">
                            @(context.Items == null ? "" : $"[{context.Items.Count()}]")
                        </span>
                    </FluentCheckbox>
                </ItemTemplate>
            </FluentTreeView>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <FluentLabel Typo="Typography.Body" Color="Color.Accent">
                Toplam:&nbsp;<b>@Count</b> kategori
            </FluentLabel>
        </FluentGridItem>
    </FluentGrid>
}
else {
    <FluentCard class="card-padding" Style="max-width:400px;">
        <FluentSkeleton Shimmer="true" Style="margin-top: 10px;" Width="100%" Height="50px"></FluentSkeleton>
        <FluentSkeleton Shimmer="true" Style="margin-top: 10px;" Width="100%" Height="20px"></FluentSkeleton>
        <FluentSkeleton Shimmer="true" Style="margin-top: 10px;" Width="100%" Height="20px"></FluentSkeleton>
        <FluentSkeleton Shimmer="true" Style="margin-top: 10px;" Width="100%" Height="20px"></FluentSkeleton>
        <FluentSkeleton Shimmer="true" Style="margin-top: 10px;" Width="100%" Height="20px"></FluentSkeleton>
        <FluentSkeleton Shimmer="true" Style="margin-top: 10px;" Width="100%" Height="20px"></FluentSkeleton>
        <FluentSkeleton Shimmer="true" Style="margin-top: 10px;" Width="100%" Height="20px"></FluentSkeleton>
        <FluentSkeleton Shimmer="true" Style="margin-top: 10px;" Width="100%" Height="20px"></FluentSkeleton>
        <FluentSkeleton Shimmer="true" Style="margin-top: 10px;" Width="100%" Height="20px"></FluentSkeleton>
        <FluentSkeleton Shimmer="true" Style="margin-top: 10px;" Width="100%" Height="20px"></FluentSkeleton>
        <FluentSkeleton Shimmer="true" Style="margin-top: 10px;" Width="100%" Height="20px"></FluentSkeleton>
        <FluentSkeleton Shimmer="true" Style="margin-top: 10px;" Width="100%" Height="50px"></FluentSkeleton>
    </FluentCard>
}

@code {
    [Parameter]
    public ProductExtension product_extension { get; set; }
    private IQueryable<Category>? categories { get; set; } = null;
    public Category default_category { get; set; } = null;
    public bool loading = true;
    private int Count = -1;
    private List<ITreeViewItem> Items = new List<ITreeViewItem>();
    private List<ITreeViewItem> SelectedItems = new List<ITreeViewItem>();

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await GetDefaultCategory();
            await Refresh();
        }
    }

    // Add or remove item from the selected items list
    private void CheckboxHandler(bool selected, ITreeViewItem item) {
        if (selected && !SelectedItems.Contains(item)) {
            var added_category = categories?.FirstOrDefault(x => x.id.ToString() == item.Id);
            if (added_category != null) {
                product_extension.categories.Add(added_category);
                product_extension.category_ids = string.Join(",", product_extension.categories.Select(x => x.id));
                SelectedItems.Add(item);
            }
        }
        else if (!selected && SelectedItems.Contains(item)) {
            if (default_category.id.ToString() != item.Id) {
                var removed_category = categories?.FirstOrDefault(x => x.id.ToString() == item.Id);
                if (removed_category != null) {
                    product_extension.categories.Remove(removed_category);
                    product_extension.category_ids = string.Join(",", product_extension.categories.Select(x => x.id));
                    SelectedItems.Remove(item);
                }
            }
        }
    }

    public async Task Refresh(Category? _selected_category = null) {
        if (default_category != null) {
            Items.Clear();
            // Avoid blocking the UI thread by not using Task.Run with async/await inside
            var treeItems = await LoadCategoryTreeAsync(default_category.id);
            var item = new TreeViewItem {
                    Id = default_category.id.ToString(),
                    Text = "Ana Kategori",
                    Expanded = true,
                    Items = treeItems
                };
            SelectedItems.Add(item);
            Items.Add(item);

        }
        StateHasChanged();
    }

    private async Task<List<TreeViewItem>?> LoadCategoryTreeAsync(int _root_id) {
        try {
            loading = true;
            var apifilter = new ApiFilter() {
                    Pager = new Pager() {
                        ItemsPerPage = int.MaxValue,
                        CurrentPageIndex = 0
                    },
                    Filters = new List<Filter<dynamic>>(),
                };
            string json = JsonConvert.SerializeObject(apifilter);
            var response = await PostHelper.Request<List<Category>>(
                HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Post, Classes.PostHelper.PostDestination.Api,
                "api/Category/GetCategories",
                new StringContent(json, Encoding.UTF8, "application/json")
            );

            var treeItem = new List<TreeViewItem>();
            if (response != null && response.Success && response.Data != null) {
                response.Data = response.Data.OrderBy(x => x.id).ToList();
                categories = response.Data.AsQueryable();
                Count = categories.Count();
                if (response.ApiFilter != null && response.Data.Count > 0) {
                    // Build a lookup for parent_id -> children for O(1) access
                    var categoryLookup = categories.GroupBy(c => c.parent_id)
                                                   .ToDictionary(g => g.Key, g => g.ToList());

                    // Use a non-blocking, iterative approach to build the tree
                    List<TreeViewItem> BuildTree(int parentId) {
                        var result = new List<TreeViewItem>();
                        if (!categoryLookup.TryGetValue(parentId, out var children))
                            return result;

                        foreach (var child in children) {
                            var item = new TreeViewItem {
                                    Id = child.id.ToString(),
                                    Text = child.category_name + (!child.is_active ? " (pasif)" : ""),
                                    Expanded = false,
                                };
                            // Recursively build children
                            item.Items = BuildTree(child.id);
                            if (product_extension.categories.FirstOrDefault(x => x.id.ToString() == item.Id) != null)
                                SelectedItems.Add(item);
                            result.Add(item);
                        }
                        return result;
                    }

                    // Start from the given _root_id
                    treeItem = BuildTree(_root_id);
                }
                else {
                    return null;
                }
            }
            return treeItem;
        }
        catch (Exception ex) {
            Trace.WriteLine(ex.Message);
            categories = null;
            return new List<TreeViewItem>();
        }
        finally {
            loading = false;
        }
    }

    protected async Task GetDefaultCategory() {
        try {
            var response = await PostHelper.Request<Category>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Get, Classes.PostHelper.PostDestination.Api,
                "api/Category/GetDefaultCategory", null);
            if (response != null && response.Success && response.Data != null) {
                default_category = response.Data;
            }
        }
        catch (Exception ex) {
            Trace.WriteLine(ex.Message);
        }
    }
}
