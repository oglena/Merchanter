@rendermode InteractiveServer
@using MerchanterFrontend.Components.Pages.Catalog
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@inject IPostHelper PostHelper
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IMessageService MessageService

@if (customer_id > 0 && brands != null) {
    <FluentGrid Justify="JustifyContent.SpaceBetween" Spacing="2">
        @if (!string.IsNullOrWhiteSpace(page_message)) {
            <FluentGridItem xs="12">
                <AlertComponent page_message="@page_message" message_status="@message_status" />
            </FluentGridItem>
        }
        <FluentGridItem xs="12">
            <FluentToolbar style="width:100%;border-radius:5px;padding:5px !important;" Orientation="Orientation.Horizontal">
                <FluentIcon Value="@(new Icons.Filled.Size20.Apps())" Slot="start" Color="Color.Accent" />
                <FluentButton Appearance="Appearance.Outline" Disabled="@loading" OnClick="() => OpenPanelRightAsync(null)" IconStart="@(new Icons.Regular.Size20.New())">Yeni Marka</FluentButton>
                @if (default_brand != null) {
                    <FluentBadge>Varsayılan Marka:&nbsp;@default_brand</FluentBadge>
                }
                <FluentSelect Data="@brand_is_active_filter" TOption="BrandStatus" Disabled="@loading" ValueChanged="@((e) => OnBrandActiveFilterChanged(e))" Width="150px" Appearance="Appearance.Stealth" Style="margin-right:10px;" slot="end">
                    <FluentOption Value="0" Selected="@(brand_is_active_filter == BrandStatus.All)">Tüm Durumlar</FluentOption>
                    <FluentOption Value="1" Selected="@(brand_is_active_filter == BrandStatus.Active)">Aktif Markalar</FluentOption>
                    <FluentOption Value="2" Selected="@(brand_is_active_filter == BrandStatus.Passive)">Pasif Markalar</FluentOption>
                </FluentSelect>
                <FluentTextField @bind-Value="@brand_name_filter" Disabled="@loading" Placeholder="Ara" Style="margin-right:10px;" slot="end">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Search())" Color="@Color.Neutral" Slot="end" />
                </FluentTextField>
                <FluentButton Appearance="Appearance.Outline" OnClick="Refresh" Disabled="@loading" Loading="@loading" IconStart="@(new Icons.Regular.Size20.Filter())" Style="margin-right:10px;" Slot="end">Filtrele</FluentButton>
                <FluentButton Appearance="Appearance.Outline" OnClick="ClearFilters" Disabled="@loading" Loading="@loading" IconStart="@(new Icons.Regular.Size20.Broom())" Slot="end">Temizle</FluentButton>
            </FluentToolbar>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <FluentPaginator State="@pagination" CurrentPageIndexChanged="Refresh">
                <SummaryTemplate>
                    <div style="display:flex;align-items:center;">
                        <FluentSelect TOption="int" Width="100px" ValueChanged="@(async (e) => await OnItemsPerPageChanged(e))">
                            <FluentOption Value="5" Selected="@(pagination.ItemsPerPage == 5)">5 adet</FluentOption>
                            <FluentOption Value="10" Selected="@(pagination.ItemsPerPage == 10)">10 adet</FluentOption>
                            <FluentOption Value="20" Selected="@(pagination.ItemsPerPage == 20)">20 adet</FluentOption>
                            <FluentOption Value="50" Selected="@(pagination.ItemsPerPage == 50)">50 adet</FluentOption>
                        </FluentSelect>
                        <FluentLabel Typo="Typography.Body">&nbsp;&nbsp;Toplam: <strong>@(pagination.TotalItemCount ?? 0)</strong> girdi</FluentLabel>
                    </div>
                </SummaryTemplate>
                <PaginationTextTemplate>
                    <strong>@(pagination.CurrentPageIndex + 1)</strong> / <strong>@(pagination.LastPageIndex + 1)</strong> sayfa
                </PaginationTextTemplate>
            </FluentPaginator>
        </FluentGridItem>
        <FluentGridItem xs="12">
            <FluentDataGrid Id="brands-grid" Items="@brands" RowSize="DataGridRowSize.Large" GenerateHeader="GenerateHeaderOption.Sticky"
                            TGridItem="Brand" Loading="loading" DisplayMode="DataGridDisplayMode.Grid" ShowHover="true">
                <ChildContent>
                    <PropertyColumn Title="ID" Property="@(b => b.id)" Width="100px" Align="Align.End" Sortable="true" />
                    <PropertyColumn Title="Marka Adı" Property="@(b => b.brand_name)" Align="Align.Center" />
                    <PropertyColumn Title="Durum" Property="@(b => b.status ? "Aktif" : "Pasif")" Align="Align.Center" />
                    <TemplateColumn Title="" Width="250px">
                        <FluentButton Disabled="@(context.brand_name == default_brand)" OnClick="@(() => DeleteBrand(context))" Appearance="Appearance.Outline" IconStart="@(new Icons.Regular.Size20.Delete())">Sil</FluentButton>
                        <FluentButton OnClick="() => OpenPanelRightAsync(context)" Appearance="Appearance.Outline" IconStart="@(new Icons.Regular.Size20.Edit())">Düzenle</FluentButton>
                    </TemplateColumn>
                </ChildContent>
                <EmptyContent>
                    <FluentLayout>
                        <ChildContent>
                            <span style="color: #9f9f9f;font-weight: bold"><i>Veri Yok.</i></span>
                        </ChildContent>
                    </FluentLayout>
                </EmptyContent>
                <LoadingContent>
                    <FluentLayout Orientation="Orientation.Horizontal">
                        <ChildContent>
                            <FluentProgressRing />
                        </ChildContent>
                    </FluentLayout>
                </LoadingContent>
            </FluentDataGrid>
        </FluentGridItem>
    </FluentGrid>
}
else {
    <FluentProgressRing Size="ProgressRingSize.Large" />
}

@code {
    [Parameter]
    public int customer_id { get; set; } = 0;
    private IQueryable<Brand>? brands { get; set; } = null;
    private string? default_brand = null;
    public bool loading = false;
    private string? page_message = "";
    private string? message_status = "";
    private string? brand_name_filter = null;
    private BrandStatus brand_is_active_filter { get; set; } = BrandStatus.All;
    private PaginationState pagination = new PaginationState() { ItemsPerPage = 20 };
    public enum BrandStatus { All = 0, Active = 1, Passive = 2 }

    private IDialogReference? _dialog;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            default_brand = GetDefaultBrand();
            await Refresh();
        }
    }

    protected async Task Refresh() {
        await LoadBrands();
    }

    private string? GetDefaultBrand() {
        return HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.default_brand)?.Value;
    }

    private async Task LoadBrands() {
        try {
            loading = true;
            var apifilter = new ApiFilter() {
                    Pager = new Pager() {
                        ItemsPerPage = pagination.ItemsPerPage,
                        CurrentPageIndex = pagination.CurrentPageIndex
                    },
                    Filters = new List<Filter<dynamic>>(),
                };
            if (!string.IsNullOrWhiteSpace(brand_name_filter)) {
                apifilter.Filters.Add(new Filter<dynamic>() {
                        Field = "brand_name",
                        Operator = "LIKE",
                        Value = "%" + brand_name_filter + "%"
                    });
            }
            if (brand_is_active_filter != BrandStatus.All) {
                apifilter.Filters.Add(new Filter<dynamic>() {
                        Field = "status",
                        Value = brand_is_active_filter == BrandStatus.Active ? 1 : 0
                    });
            }
            string json = JsonConvert.SerializeObject(apifilter);
            var response = await PostHelper.Request<List<Brand>>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Post, Classes.PostHelper.PostDestination.Api,
                "api/Brand/GetBrands",
                new StringContent(json, Encoding.UTF8, "application/json")
                );

            if (response != null && response.Success && response.Data != null) {
                brands = response.Data.AsQueryable();
                if (response.ApiFilter != null) {
                    await pagination.SetTotalItemCountAsync(response.ApiFilter.TotalCount.GetValueOrDefault());
                }
            }
        }
        catch (Exception ex) {
            Console.WriteLine(ex.Message);
            brands = null;
        }
        finally {
            page_message = "";
            message_status = "";
            loading = false;
            StateHasChanged();
        }
    }

    private async Task DeleteBrand(Brand? _brand) {
        var dialog = await DialogService.ShowMessageBoxAsync(new DialogParameters<MessageBoxContent>() {
                Content = new() {
                    Title = "Emin Misiniz ?",
                    MarkupMessage = new MarkupString("Seçtiğiniz <strong>marka</strong> siliniyor."),
                    Icon = new Icons.Regular.Size24.Delete(),
                    IconColor = Color.Error,
                },
                PrimaryAction = "Sil",
                SecondaryAction = "İptal",
                Width = "250px",
            });
        var result = await dialog.Result;
        if (!result.Cancelled) {
            if (_brand != null) {
                var response = await PostHelper.Request<bool>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                    Classes.PostHelper.PostMethod.Delete, Classes.PostHelper.PostDestination.Api,
                    "api/Brand/DeleteBrand",
                    new StringContent(JsonConvert.SerializeObject(_brand), Encoding.UTF8, "application/json")
                    );
                if (response != null && response.Success && response.Data == true) {
                    await Refresh();
                    page_message = "[" + DateTime.Now.ToString() + "] Marka silindi.";
                    message_status = "işlem başarılı";
                }
                else {
                    page_message = "[" + DateTime.Now.ToString() + "] Marka silinemedi.";
                    message_status = "işlem başarısız";
                }
            }
        }
    }

    private async Task OpenPanelRightAsync(Brand? _brand) {
        MessageService.Clear();
        var dialog_parameters = new DialogParameters<Brand>() {
                Content = _brand == null ? default! : _brand,
                Alignment = HorizontalAlignment.Right,
                Title = _brand == null ? "Yeni Marka Ekle" : "Marka Düzenleniyor",
                PrimaryAction = "Kaydet",
                SecondaryAction = "İptal",
                DismissTitle = "Kapat",
                PreventDismissOnOverlayClick = false,
                PrimaryActionEnabled = true,
                DialogType = DialogType.Panel
            };
        _dialog = await DialogService.ShowPanelAsync<BrandPanel>(_brand == null ? new Brand() { customer_id = customer_id } : _brand, dialog_parameters);

        DialogResult result = await _dialog.Result;
        await HandlePanel(result);
    }

    private async Task HandlePanel(DialogResult result) {
        if (result.Cancelled) {
            page_message = "";
            message_status = "";
            return;
        }

        if (result.Data is not null) {
            var new_brand = (Brand)result.Data;
            if (new_brand.customer_id > 0) {
                // Update or insert existing brand
                var response = await PostHelper.Request<Brand>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                    Classes.PostHelper.PostMethod.Put, Classes.PostHelper.PostDestination.Api,
                    "api/Brand/SaveBrand",
                    new StringContent(JsonConvert.SerializeObject(new_brand), Encoding.UTF8, "application/json")
                    );
                if (response != null && response.Success && response.Data != null) {
                    await Refresh();
                    page_message = "[" + DateTime.Now.ToString() + "] Marka güncellendi.";
                    message_status = "işlem başarılı";
                }
                else {
                    await Refresh();
                    page_message = "[" + DateTime.Now.ToString() + "] Marka güncellenemedi.";
                    message_status = "işlem başarısız";
                }
            }
        }
    }

    private async Task OnItemsPerPageChanged(string _items_per_page) {
        pagination.ItemsPerPage = int.Parse(_items_per_page);
        await pagination.SetCurrentPageIndexAsync(0); // Reset to the first page
        await Refresh();
    }

    private void OnBrandActiveFilterChanged(string? _status) {
        if (string.IsNullOrWhiteSpace(_status)) {
            brand_is_active_filter = BrandStatus.All;
            return;
        }
        if (int.TryParse(_status, out int status)) {
            brand_is_active_filter = (BrandStatus)status;
        }
        else {
            brand_is_active_filter = BrandStatus.All;
        }
    }

    public async void ClearFilters() {
        brand_name_filter = null;
        brand_is_active_filter = BrandStatus.All;
        await pagination.SetCurrentPageIndexAsync(0);
        await Refresh();
    }
}
