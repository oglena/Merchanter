@attribute [Authorize]
@page "/Account/Customer/{CID?}"
@rendermode InteractiveServer

@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@inject IHttpClientFactory ClientFactory
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration configuration
@inject IPostHelper PostHelper

<PageTitle>Customer [@CID] | Merchanter</PageTitle>
<div class="row mt-3 pb-2">
	<div class="col-12 pb-2 bg-light rounded-3">
		@if (customer != null && customer_id > 0)
		{
			<EditForm Model="customer" Context="formContext" class="container-fluid">
				<div class="container-fluid">
					<div class="row mt-3">
						<div class="col-12 ps-2">
							<h1>
								Customer:&nbsp; @company_name &nbsp;&nbsp;&nbsp;
								<a href="@("Account/Customer/" + customer.customer_id.ToString() + "/Logs")" class="btn btn-primary">Logs</a>
								@* <a href="@("Account/Customer/" + customer.customer_id.ToString() + "/Notifications")" class="btn btn-primary">Notifications</a> *@
								<a href="@("Account/Customer/" + customer.customer_id.ToString() + "/Settings")" class="btn btn-primary">Settings</a>
								<button type="submit" class="btn btn-outline-primary" @onclick="@(() => RefreshCustomer())">Refresh</button>
								<button type="submit" class="btn btn-success" @onclick="@(() => SaveCustomer(customer))">Save</button>
							</h1>
						</div>
					</div>
				</div>
				@if (!string.IsNullOrWhiteSpace(@page_message))
				{
					<hr />
					<span>@page_message</span>
				}
				<hr />

				<div class="container-fluid">
					<div class="row mt-3">
						<div class="col-3 ps-2 mb-3">
							<label for="user_name" class="form-label">User Name</label>
							<InputText type="text" class="form-control" placeholder="User Name cannot be empty!" @bind-Value="customer.user_name" />
						</div>
						<div class="col-3 ps-2 mb-3">
							<label for="password" class="form-label">Password</label>
							<InputText type="text" class="form-control" placeholder="Password cannot be empty!" @bind-Value="customer.password" />
						</div>
						<div class="col-3 ps-2 mb-3">
						</div>
						<div class="col-3 ps-2 mb-3">
						</div>
					</div>
					<div class="row mt-3">
						<div class="col-12 ps-2 mb-3">
							<div class="form-check form-switch">
								<label class="form-check-label">&nbsp;Customer Status</label>
								<InputCheckbox type="checkbox" class="form-check-input" role="switch" @bind-Value="customer.status"></InputCheckbox>
							</div>
						</div>
					</div>
					<div class="row mt-3">
						<div class="col-12 ps-2 mb-3 table-overflow">
							<table class="table table-responsive table-hover">
								<thead>
									<tr>
										<th>
											Worker Status
										</th>
										<th>
											Period
										</th>
										<th>
											Is Working
										</th>
										<th>
											Last Worked
										</th>
									</tr>
								</thead>
								<tbody class="table-group-divider">
									<tr>
										<td>
											<div class="form-check form-switch mt-2">
												<label class="form-check-label">&nbsp;Product Sync Status</label>
												<InputCheckbox type="checkbox" class="form-check-input" role="switch" @bind-Value="customer.product_sync_status"></InputCheckbox>
											</div>
										</td>
										<td>
											<InputNumber type="text" class="form-control" placeholder="Password cannot be empty!" @bind-Value="customer.product_sync_timer" />
										</td>
										<td>
											<div class="form-check form-switch mt-2">
												<InputCheckbox type="checkbox" class="form-check-input" role="switch" @bind-Value="customer.is_productsync_working" disabled></InputCheckbox>
											</div>
										</td>
										<td>
											<InputDate Type="InputDateType.DateTimeLocal" class="form-control form-control-sm col-4" @bind-Value:format="dd/MM/yyyy hh:MM:ss" @bind-Value="customer.last_product_sync_date"></InputDate>
										</td>
									</tr>
									<tr>
										<td>
											<div class="form-check form-switch mt-2">
												<label class="form-check-label">&nbsp;Order Sync Status</label>
												<InputCheckbox type="checkbox" class="form-check-input" role="switch" @bind-Value="customer.order_sync_status"></InputCheckbox>
											</div>
										</td>
										<td>
											<InputNumber type="text" class="form-control" placeholder="Password cannot be empty!" @bind-Value="customer.order_sync_timer" />
										</td>
										<td>
											<div class="form-check form-switch mt-2">
												<InputCheckbox type="checkbox" class="form-check-input" role="switch" @bind-Value="customer.is_ordersync_working" disabled></InputCheckbox>
											</div>
										</td>
										<td>
											<InputDate Type="InputDateType.DateTimeLocal" class="form-control form-control-sm col-4" format-value="yyyy-MM-dd hh:MM:ss" @bind-Value="customer.last_order_sync_date"></InputDate>
										</td>
									</tr>
									<tr>
										<td>
											<div class="form-check form-switch mt-2">
												<label class="form-check-label">&nbsp;Notification Sync Status</label>
												<InputCheckbox type="checkbox" class="form-check-input" role="switch" @bind-Value="customer.notification_sync_status"></InputCheckbox>
											</div>
										</td>
										<td>
											<InputNumber type="text" class="form-control" placeholder="Password cannot be empty!" @bind-Value="customer.notification_sync_timer" />
										</td>
										<td>
											<div class="form-check form-switch mt-2">
												<InputCheckbox type="checkbox" class="form-check-input" role="switch" @bind-Value="customer.is_notificationsync_working" disabled></InputCheckbox>
											</div>
										</td>
										<td>
											<InputDate Type="InputDateType.DateTimeLocal" class="form-control form-control-sm col-4" format-value="yyyy-MM-dd hh:MM:ss" @bind-Value="customer.last_notification_sync_date"></InputDate>
										</td>
									</tr>
									<tr>
										<td>
											<div class="form-check form-switch mt-2">
												<label class="form-check-label">&nbsp;XML Sync Status</label>
												<InputCheckbox type="checkbox" class="form-check-input" role="switch" @bind-Value="customer.xml_sync_status"></InputCheckbox>
											</div>
										</td>
										<td>
											<InputNumber type="text" class="form-control" placeholder="Password cannot be empty!" @bind-Value="customer.xml_sync_timer" />
										</td>
										<td>
											<div class="form-check form-switch mt-2">
												<InputCheckbox type="checkbox" class="form-check-input" role="switch" @bind-Value="customer.is_xmlsync_working" disabled></InputCheckbox>
											</div>
										</td>
										<td>
											<InputDate Type="InputDateType.DateTimeLocal" class="form-control form-control-sm col-4" format-value="yyyy-MM-dd hh:MM:ss" @bind-Value="customer.last_xml_sync_date"></InputDate>
										</td>
									</tr>
									<tr>
										<td>
											<div class="form-check form-switch mt-2">
												<label class="form-check-label">&nbsp;Invoice Sync Status</label>
												<InputCheckbox type="checkbox" class="form-check-input" role="switch" @bind-Value="customer.invoice_sync_status"></InputCheckbox>
											</div>
										</td>
										<td>
											<InputNumber type="text" class="form-control" placeholder="Password cannot be empty!" @bind-Value="customer.invoice_sync_timer" />
										</td>
										<td>
											<div class="form-check form-switch mt-2">
												<InputCheckbox type="checkbox" class="form-check-input" role="switch" @bind-Value="customer.is_invoicesync_working" disabled></InputCheckbox>
											</div>
										</td>
										<td>
											<InputDate Type="InputDateType.DateTimeLocal" class="form-control form-control-sm col-4" format-value="yyyy-MM-dd hh:MM:ss" @bind-Value="customer.last_invoice_sync_date"></InputDate>
										</td>
									</tr>
								</tbody>
							</table>
						</div>
					</div>
				</div>
			</EditForm>
		}
		else
		{
			<div class="container-fluid mt-5">
				<h3 class="text-center">@loading</h3>
			</div>
		}
	</div>
</div>
@code {
	[Parameter]
	public string? CID { get; set; }
	public int customer_id = 0;
	public string company_name { get; set; } = "";

	public Merchanter.Classes.Customer? customer { get; set; }

	private string loading = "...LOADING...";
	private string page_message = string.Empty;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			if (int.TryParse(CID, out customer_id))
			{
				int.TryParse(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.admin_id)?.Value, out int admin_id);
				if (admin_id > 0)
				{
					await LoadCustomer(customer_id);
				}
			}
		}
		StateHasChanged();
	}

	protected async Task LoadCustomer(int CID)
	{
		var response = await PostHelper.Request<Merchanter.Classes.Customer>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
					Classes.PostHelper.PostMethod.Get,
					"api/Customer/" + CID + "/GetCustomer");

		if (response != null && response.Success && response.Data != null)
		{
			customer = response.Data;
			if (customer != null)
			{
				company_name = customer.user_name;
				page_message = string.Empty;
			}
			else
				page_message = "Customer not found.";
		}
		else
		{
			page_message = "Merchanter Server ServiceAPI data response empty.";
		}
	}

	private async Task RefreshCustomer()
	{
		if (int.TryParse(CID, out customer_id))
		{
			customer = null;
			StateHasChanged();
			int.TryParse(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.admin_id)?.Value, out int admin_id);
			if (admin_id > 0)
			{
				await LoadCustomer(customer_id);
			}
		}
		StateHasChanged();
	}


	private async Task SaveCustomer(Merchanter.Classes.Customer _customer)
	{
		if (int.TryParse(CID, out customer_id))
		{
			int.TryParse(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.admin_id)?.Value, out int admin_id);
			if (admin_id > 0)
			{
				var response = await PostHelper.Request<Merchanter.Classes.Customer>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
				Classes.PostHelper.PostMethod.Put,
				"api/Customer/" + CID + "/SaveCustomer");

				if (response != null && response.Success && response.Data != null)
				{
					customer = response.Data;
					if (customer != null)
					{
						company_name = customer.user_name;
						page_message = string.Empty;
					}
					else
						page_message = "Customer update fail.";
				}
				else
				{
					page_message = "Merchanter Server ServiceAPI data response empty.";
				}
			}
		}
	}
}
