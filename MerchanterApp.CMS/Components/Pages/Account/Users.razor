@page "/account/users"
@rendermode InteractiveServer

@using Newtonsoft.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IConfiguration configuration

<PageTitle>Customers | Merchanter</PageTitle>

<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-12 ps-2">
            <h1>Users</h1>
        </div>
    </div>
</div>
@if (!string.IsNullOrWhiteSpace(@page_message))
{
    <hr />
    <span>@page_message</span>
}
<hr />

<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-12 ps-2">
            @if (customers != null)
            {
                <table class="table table-responsive table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Customer ID</th>
                            <th scope="col">User Name</th>
                            <th scope="col">User Status</th>
                            <th scope="col">Product Sync Status</th>
                            <th scope="col">Order Sync Status</th>
                            <th scope="col">Notification Sync Status</th>
                            <th scope="col">XML Sync Status</th>
                            <th scope="col">Invoice Sync Status</th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody class="table-group-divider">
                        @foreach (var item in customers)
                        {
                            <tr>
                                <td class="align-content-center">
                                    @item.customer_id
                                </td>
                                <td class="align-content-center">
                                    @item.user_name
                                </td>
                                <td class="align-content-center">
                                    @(item.status ? "Enabled" : "Disabled")
                                </td>
                                <td class="align-content-center">
                                    @(item.product_sync_status ? "Enabled" : "Disabled")
                                </td>
                                <td class="align-content-center">
                                    @(item.order_sync_status ? "Enabled" : "Disabled")
                                </td>
                                <td class="align-content-center">
                                    @(item.notification_sync_status ? "Enabled" : "Disabled")
                                </td>
                                <td class="align-content-center">
                                    @(item.xml_sync_status ? "Enabled" : "Disabled")
                                </td>
                                <td class="align-content-center">
                                    @(item.invoice_sync_status ? "Enabled" : "Disabled")
                                </td>
                                <td class="align-content-center">
                                    <a class="btn btn-primary" href="@("Account/User/" + item.customer_id.ToString()+"/Logs")">Show Logs</a>&nbsp;&nbsp;
                                    <a class="btn btn-primary" href="@("Account/User/" + item.customer_id.ToString())">Edit Customer</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                @loading
            }
        </div>
    </div>
</div>

@code {
    private List<Customer>? customers { get; set; }
    private string loading = "Loading...";
    private string page_message = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && HttpContextAccessor.HttpContext != null)
        {
            int.TryParse(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.admin_id)?.Value, out int admin_id);
            if (admin_id > 0)
            {
                string? token = HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value;
                if (!string.IsNullOrWhiteSpace(token))
                {
                    using (HttpClient httpClient = new HttpClient())
                    {
                        httpClient.BaseAddress = new Uri(configuration["AppSettings:MerchanterServerUrl"]);
                        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                        using HttpResponseMessage response = await httpClient.GetAsync("api/Customer/GetCustomers");

                        if (response.IsSuccessStatusCode)
                        {
                            var base_respond = JsonConvert.DeserializeObject<BaseResponseModel>(response.Content.ReadAsStringAsync().Result);
                            if (base_respond != null && base_respond.Success && base_respond.Data != null)
                            {
                                customers = JsonConvert.DeserializeObject<List<Customer>>(base_respond.Data.ToString());
                                if (customers != null && customers.Count == 0)
                                    page_message = "No servers working.";
                                else
                                    page_message = string.Empty;

                                loading = string.Empty;
                            }
                            else
                            {
                                page_message = "ServerAPI Data failed.";
                            }
                        }
                        else
                        {
                            page_message = "ServerAPI failed.";
                        }
                    }
                }
            }
            StateHasChanged();
        }
    }
}
