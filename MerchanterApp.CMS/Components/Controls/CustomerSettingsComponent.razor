@rendermode InteractiveServer
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@inject IHttpContextAccessor HttpContextAccessor
@inject IPostHelper PostHelper

@if (customer != null)
{
	<div class="container-fluid sticky-top-lg bg-dark text-light rounded-2 p-3">
		<div class="row mt-3">
			<div class="col-12 ps-2">
				<h1>Customer Settings: @(!string.IsNullOrWhiteSpace(CID) && int.Parse(CID) > 0 ? customer?.user_name : "N/A") </h1>
			</div>
		</div>
		@if (!string.IsNullOrWhiteSpace(@page_message))
		{
			<hr />
			<span>@page_message</span>
		}
		@if (settings != null)
		{
			<div class="row mt-3">
				<div class="col-12 ps-2">
					<div class="form-floating">
						<select class="form-select text-start" aria-label="servers-select">
							<option value="0" selected>Select to Show Customer Settings...</option>
							<option value="general">General Settings</option>
							<option value="netsis">Netsis Settings</option>
							<option value="magento">Magento Settings</option>
							<option value="entegra">Entegra Settings</option>
							<option value="shipment">Shipment Settings</option>
						</select>
						<label>Settings</label>
					</div>
				</div>
			</div>
		}
	</div>
	<hr />
	<div class="container-fluid">
		<div class="row mt-3">
		</div>
	</div>
}
else
{
	<div class="container-fluid w-100">
		<h3 class="text-center mt-5">@loading</h3>
	</div>
}

@code {
	[Parameter]
	public string? CID { get; set; }
	private string loading = "...RELOADING...";
	private string page_message = "Settings Loading...";
	Customer? customer { get; set; }
	SettingsMerchanter? settings { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			int customer_id = 0;
			if (!string.IsNullOrWhiteSpace(CID) && int.TryParse(CID, out customer_id))
			{
				await LoadCustomer(customer_id);
				await LoadCustomerSettings(customer_id);
			}
		}
	}

	public async Task LoadCustomerSettings(int _customer_id)
	{
		if (_customer_id > 0 && customer != null)
		{
			var response = await PostHelper.Request<SettingsMerchanter>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
				Classes.PostHelper.PostMethod.Get,
				"api/Settings/" + _customer_id.ToString() + "/GetCustomerSettings");

			if (response != null && response.Success && response.Data != null)
			{
				settings = response.Data;
				page_message = string.Empty;
				StateHasChanged();
			}
			else
			{
				page_message = "Merchanter Server ServiceAPI data response empty.";
			}
		}
	}

	public async Task LoadCustomer(int _customer_id)
	{
		if (_customer_id > 0)
		{
			customer = null;
			var response = await PostHelper.Request<Customer>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
				Classes.PostHelper.PostMethod.Get,
				"api/Customer/" + _customer_id.ToString() + "/GetCustomer");

			if (response != null && response.Success && response.Data != null)
			{
				customer = response.Data;
				StateHasChanged();
			}
			else
			{
				page_message = "Merchanter Server ServiceAPI data response empty.";
			}
		}
	}
}
