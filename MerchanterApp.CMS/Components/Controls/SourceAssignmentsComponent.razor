<h3>Source Assignments</h3>

<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-md-8">
            @if( settings_sources != null ) {
                <table class="table table-responsive">
                    <thead>
                        <tr>
                            <th scope="col" class="d-none">#ID</th>
                            <th scope="col">Actions</th>
                            <th scope="col">Source Name</th>
                            <th scope="col">Direction</th>
                            <th scope="col">Type</th>
                            <th scope="col">Active</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach( var item in settings_sources ) {
                            <tr class="@(edit_item != null && item.id == edit_item.id ? "table-dark" : "")">
                                <th class="table-primary align-content-center text-nowrap text-end d-none" scope="row">@item.id</th>
                                <td class="align-content-center">
                                    <div class="container">
                                        <div class="row p-1"><button type="button" class="btn btn-primary" @onclick="() => Edit(item)">Edit</button></div>
                                    </div>
                                </td>
                                <td class="align-content-center"><span class="text-nowrap">@item.name</span></td>
                                <td class="align-content-center"><span class="text-nowrap">@item.direction</span></td>
                                <td class="align-content-center"><span class="text-nowrap">@item.type</span></td>
                                <td class="align-content-center">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" checked="@item.is_active" disabled readonly>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else {
                <span class="text-center mt-3 fs-3">@loading_text</span>
            }
        </div>
        <div class="col-md-4 p-4 mb-3 mt-1 bg-dark text-light rounded">
            @if( edit_item != null && edit_item.id > 0 ) {
                <span class="p-3 fs-3 d-none">@edit_item.id</span>
                <span class="p-3 fs-3">Edit Work Source</span>
                <div class="container">
                    <div class="row mt-3">
                        <select class="form-select form-select-lg mb-3">
                            @foreach( var item in source_names.DistinctBy( x => x.source_name ) ) {
                                <option value="@item" selected="@(item.source_name == edit_item.name ? true : false)">@item.source_name</option>
                            }
                        </select>
                    </div>
                    <div class="row mt-3">
                        <select class="form-select form-select-lg mb-3">
                            @foreach( var item in source_directions ) {
                                <option value="@item" selected="@(item.direction_name == edit_item.direction ? true : false)">@item.direction_name</option>
                            }
                        </select>
                    </div>
                    <div class="row mt-3">
                        <select class="form-select form-select-lg mb-3">
                            @foreach( var item in source_types ) {
                                <option value="@item" selected="@(item.type_name == edit_item.type ? true : false)">@item.type_name</option>
                            }
                        </select>
                    </div>
                    <div class="row mt-5 ms-3 form-check form-switch">
                        <div class="col-2"></div>
                        <div class="col-10">
                            <input type="checkbox" class="form-check-input" role="switch" checked="@(edit_item.is_active)">
                            <label class="form-check-label">&nbsp;Is Active</label>
                        </div>
                    </div>
                </div>
            }
            else {
                <span class="p-3 fs-3">New Work Source</span>
                <div class="container">
                    <div class="row p-1">
                        <span class="p-3 fs-4">You have reached active Worker limit(10). Please upgrade your account or edit from availables.</span>
                    </div>
                </div>
            }

            <div class="container mt-3">
                <div class="row p-1"><hr />
                    <div class="col-6">
                        <button type="button" class="btn btn-secondary w-100" @onclick="NewWorkSource">New</button>
                    </div>
                    @if( edit_item != null && edit_item.id > 0 ) {
                        <div class="col-6">
                            <button type="button" class="btn btn-primary w-100">Save</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    [Inject, CascadingParameter]
    IHttpContextAccessor HttpContextAccessor { get; set; }
    [Inject]
    private Services.MerchanterService merchanterService { get; set; }

    [SupplyParameterFromForm( FormName = "SourceAssignmentsForm" )]
    public List<WorkSource> settings_sources { get; set; }
    public List<SourceType> source_types { get; set; } = new List<SourceType>() {
        new SourceType(){type_name = "PRODUCT"},
        new SourceType(){type_name = "ORDER"},
        new SourceType(){type_name = "SHIPMENT"},
    };
    public List<SourceDirection> source_directions { get; set; } = new List<SourceDirection>() {
        new SourceDirection(){direction_name = "MAIN_SOURCE"},
        new SourceDirection(){direction_name = "MAIN_TARGET"},
        new SourceDirection(){direction_name = "SOURCE"},
        new SourceDirection(){direction_name = "BOTH"},
    };
    public List<SourceName> source_names { get; set; } = new List<SourceName>() {
        new SourceName(){source_name = "NETSIS", type_name = new List<SourceDirection>(){ new SourceDirection(){ direction_name = "SOURCE" } } },
        new SourceName(){source_name = "NETSIS", type_name = new List<SourceDirection>(){ new SourceDirection(){ direction_name = "MAIN_TARGET" } } },
        new SourceName(){source_name = "NETSIS", type_name = new List<SourceDirection>(){ new SourceDirection(){ direction_name = "MAIN_SOURCE" } } },
        new SourceName(){source_name = "MAGENTO2", type_name = new List<SourceDirection>(){ new SourceDirection(){ direction_name = "TARGET" } } },
        new SourceName(){source_name = "ENTEGRA", type_name = new List<SourceDirection>(){ new SourceDirection(){ direction_name = "SOURCE" } }},
        new SourceName(){source_name = "PENTA", type_name = new List<SourceDirection>(){ new SourceDirection(){ direction_name = "SOURCE" } }},
        new SourceName(){source_name = "KOYUNCU", type_name = new List<SourceDirection>(){ new SourceDirection(){ direction_name = "SOURCE" } }},
        new SourceName(){source_name = "BOGAZICI", type_name = new List<SourceDirection>(){ new SourceDirection(){ direction_name = "SOURCE" } }},
        new SourceName(){source_name = "OKSID", type_name = new List<SourceDirection>(){ new SourceDirection(){ direction_name = "SOURCE" } }},
        new SourceName(){source_name = "FSP", type_name = new List<SourceDirection>(){ new SourceDirection(){ direction_name = "SOURCE" } }},
        new SourceName(){source_name = "YURTİÇİ_KARGO", type_name = new List<SourceDirection>(){ new SourceDirection(){ direction_name = "BOTH" } }},
        new SourceName(){source_name = "MNG_KARGO", type_name = new List<SourceDirection>(){ new SourceDirection(){ direction_name = "BOTH" } }},
        new SourceName(){source_name = "ARAS_KARGO", type_name = new List<SourceDirection>(){ new SourceDirection(){ direction_name = "BOTH" } }},
        new SourceName(){source_name = "MERCHANTER", type_name = new List<SourceDirection>(){ new SourceDirection(){ direction_name = "SOURCE" } }},
    };

    public string loading_text { get; set; } = string.Empty;
    public string save_message { get; set; } = string.Empty;
    public string message_type { get; set; } = "success";
    public WorkSource? edit_item { get; set; }

    public class SourceType {
        public string type_name { get; set; }
    }

    public class SourceDirection {
        public string direction_name { get; set; }
    }

    public class SourceName {
        public string source_name { get; set; }
        public List<SourceDirection> type_name { get; set; }
        public SourceDirection direction_name { get; set; }
    }

    protected override async Task OnAfterRenderAsync( bool firstRender ) {
        if( firstRender ) {
            if( HttpContextAccessor.HttpContext != null && merchanterService != null ) {
                int.TryParse( HttpContextAccessor?.HttpContext?.User?.FindFirst( Variables.customer_customer_id )?.Value, out int customer_id );
                if( merchanterService.global != null ) {
                    settings_sources = merchanterService.global.work_sources;
                }
                else {
                    merchanterService.global = merchanterService?.db_helper?.LoadSettings( customer_id );
                    settings_sources ??= merchanterService.global.work_sources;
                }
            }
            StateHasChanged();
        }
        await Task.CompletedTask;
    }

    private void NewWorkSource() {
        edit_item = null;
        StateHasChanged();
    }

    private void Edit( WorkSource _source ) {
        edit_item = _source;
        StateHasChanged();
    }
}
