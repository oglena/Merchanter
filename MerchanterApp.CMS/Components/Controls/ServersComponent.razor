@rendermode InteractiveServer
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IConfiguration configuration
@inject IPostHelper PostHelper

<div class="container-fluid bg-dark text-light rounded-2 p-3">
    <div class="row mt-3">
        <div class="col-12 ps-2">
            <h2>
                Servers
                <button type="button" class="btn btn-primary" @onclick="RefreshServers" disabled="@is_refreshing"><i class='bi bi-arrow-clockwise @(is_refreshing ? "d-none" : "")'></i><span class="spinner-border spinner-border-sm border-1 @(is_refreshing ? "" : "d-none")" aria-hidden="true"></span></button>
            </h2>
        </div>
        <div class="col-12 ps-2 pb-2">
            <span>Working Servers: <span class="badge rounded-pill text-bg-primary">&nbsp;&nbsp;@(servers != null ? servers.Count.ToString() : "0")&nbsp;&nbsp;</span></span>&nbsp&nbsp&nbsp;&nbsp
            <span>Active Customers: <span class="badge rounded-pill text-bg-primary">&nbsp;&nbsp;@(customers != null ? customers.Count.ToString() : "0")&nbsp;&nbsp;</span></span>&nbsp;&nbsp&nbsp;&nbsp
        </div>
    </div>
</div>
@if (servers != null)
{
    <div class="row mt-3">
        <div class="col-12 ps-2">
            <AlertComponent page_message="@page_message" />
            @if (servers != null)
            {
                @foreach (var item in servers)
                {
                    @if (item.customer != null)
                    {
                        <div class="card shadow" style="width: 18rem;">
                            <div class="card-body">
                                <h4 class="card-title text-success">Working Server</h4>
                                <h3><span class="badge text-bg-success shadow">@item.customer.user_name&nbsp;&nbsp;<a class="btn btn btn-primary btn-sm shadow" href="@("Customer/" + item.customer_id.ToString())"><i class="bi bi-gear"></i></a></span></h3>
                                <hr />
                                <p class="card-text">Customer ID:&nbsp; @item.customer_id</p>
                                <p class="card-text">Process ID:&nbsp; @item.PID</p>
                                <hr />
                                <p class='card-text @(!item.customer.product_sync_status ? "text-muted" : "")'>Product Working Status:&nbsp; @(!item.customer.product_sync_status ? (MarkupString)"<i class='bi bi-x-circle-fill text-danger'></i>" : item.customer.is_productsync_working ? (MarkupString)"<i class='bi bi-check-circle-fill text-success'></i>" : (MarkupString)"<i class='bi bi-dash-circle text-danger'></i>")</p>
                                <p class='card-text @(!item.customer.order_sync_status ? "text-muted" : "")'>Order Working Status:&nbsp; @(!item.customer.order_sync_status ? (MarkupString)"<i class='bi bi-x-circle-fill text-danger'></i>" : item.customer.is_ordersync_working ? (MarkupString)"<i class='bi bi-check-circle-fill text-success'></i>" : (MarkupString)"<i class='bi bi-dash-circle text-danger'></i>")</p>
                                <p class='card-text @(!item.customer.notification_sync_status ? "text-muted" : "")'>Notification Working Status:&nbsp; @(!item.customer.notification_sync_status ? (MarkupString)"<i class='bi bi-x-circle-fill text-danger'></i>" : item.customer.is_notificationsync_working ? (MarkupString)"<i class='bi bi-check-circle-fill text-success'></i>" : (MarkupString)"<i class='bi bi-dash-circle text-danger'></i>")</p>
                                <p class='card-text @(!item.customer.invoice_sync_status ? "text-muted" : "")'>Invoice Working Status:&nbsp; @(!item.customer.invoice_sync_status ? (MarkupString)"<i class='bi bi-x-circle-fill text-danger'></i>" : item.customer.is_invoicesync_working ? (MarkupString)"<i class='bi bi-check-circle-fill text-success'></i>" : (MarkupString)"<i class='bi bi-dash-circle text-danger'></i>")</p>
                                <p class='card-text @(!item.customer.xml_sync_status ? "text-muted" : "")'>XML Working Status:&nbsp; @(!item.customer.xml_sync_status ? (MarkupString)"<i class='bi bi-x-circle-fill text-danger'></i>" : item.customer.is_xmlsync_working ? (MarkupString)"<i class='bi bi-check-circle-fill text-success'></i>" : (MarkupString)"<i class='bi bi-dash-circle text-danger'></i>")</p>
                                <p class="card-footer">
                                    <a href="@("Customer/" + item.customer_id.ToString() + "/Logs")" class="btn btn-outline-primary shadow"><i class="bi bi-journal-text"></i></a>
                                    <button type="button" class="btn btn-outline-danger shadow" @onclick="( () => StopServer(item.customer_id))">
                                        Stop Merchanter
                                    </button>
                                </p>
                                <p class="card-text text-center">
                                    @server_message
                                </p>
                            </div>
                        </div>
                    }
                }
                @if (customers != null)
                {
                    @foreach (var item in customers)
                    {
                        @if (servers.Where(x => x.customer_id == item.customer_id).FirstOrDefault() == null)
                        {
                            <div class="card shadow" style="width: 18rem;">
                                <div class="card-body">
                                    <h3 class="card-title text-muted">Idle Server</h3>
                                    <h2><span class="badge text-bg-danger shadow">@item.user_name&nbsp;&nbsp;<a class="btn btn btn-primary btn-sm shadow" href="@("Customer/" + item.customer_id.ToString())"><i class="bi bi-gear"></i></a></span></h2>
                                    <hr />
                                    <p class="card-text">Customer ID:&nbsp; @item.customer_id</p>
                                    <p class="card-text">Process ID:&nbsp; 0</p>
                                    <hr />
                                    <p class='card-text @(!item.product_sync_status ? "text-muted" : "")'>Product Working Status:&nbsp; @(!item.product_sync_status ? (MarkupString)"<i class='bi bi-x-circle-fill text-danger'></i>" : item.is_productsync_working ? (MarkupString)"<i class='bi bi-check-circle-fill text-success'></i>" : (MarkupString)"<i class='bi bi-dash-circle text-danger'></i>")</p>
                                    <p class='card-text @(!item.order_sync_status ? "text-muted" : "")'>Order Working Status:&nbsp; @(!item.order_sync_status ? (MarkupString)"<i class='bi bi-x-circle-fill text-danger'></i>" : item.is_ordersync_working ? (MarkupString)"<i class='bi bi-check-circle-fill text-success'></i>" : (MarkupString)"<i class='bi bi-dash-circle text-danger'></i>")</p>
                                    <p class='card-text @(!item.notification_sync_status ? "text-muted" : "")'>Notification Working Status:&nbsp; @(!item.notification_sync_status ? (MarkupString)"<i class='bi bi-x-circle-fill text-danger'></i>" : item.is_notificationsync_working ? (MarkupString)"<i class='bi bi-check-circle-fill text-success'></i>" : (MarkupString)"<i class='bi bi-dash-circle text-danger'></i>")</p>
                                    <p class='card-text @(!item.invoice_sync_status ? "text-muted" : "")'>Invoice Working Status:&nbsp; @(!item.invoice_sync_status ? (MarkupString)"<i class='bi bi-x-circle-fill text-danger'></i>" : item.is_invoicesync_working ? (MarkupString)"<i class='bi bi-check-circle-fill text-success'></i>" : (MarkupString)"<i class='bi bi-dash-circle text-danger'></i>")</p>
                                    <p class='card-text @(!item.xml_sync_status ? "text-muted" : "")'>XML Working Status:&nbsp; @(!item.xml_sync_status ? (MarkupString)"<i class='bi bi-x-circle-fill text-danger'></i>" : item.is_xmlsync_working ? (MarkupString)"<i class='bi bi-check-circle-fill text-success'></i>" : (MarkupString)"<i class='bi bi-dash-circle text-danger'></i>")</p>
                                    <p class="card-footer">
                                        <a href="@("Customer/" + item.customer_id.ToString() + "/Logs")" class="btn btn-outline-primary shadow"><i class="bi bi-journal-text"></i></a>
                                        <button type="button" class="btn btn-outline-success shadow" @onclick="( () => StartServer(item.customer_id))">
                                            Start Merchanter
                                        </button>
                                    </p>
                                    <p class="card-text text-center">
                                        @server_message
                                    </p>
                                </div>
                            </div>
                        }
                    }
                }
                else
                {
                    <span>@customers_loading</span>
                }
            }
        </div>
    </div>
}
else
{
    <div class="container-fluid w-100">
        <h3 class="text-center mt-5">@loading</h3>
    </div>
}

@code {
    private List<MerchanterServer> servers { get; set; } = new List<MerchanterServer>();
    private List<Customer>? customers { get; set; }
    private string loading = "...LOADING...";
    private string customers_loading = "Loading All Servers...";
    private string server_message = "";
    private string page_message = "No servers working";
    private bool is_refreshing { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && HttpContextAccessor.HttpContext != null)
        {
            await RefreshCustomers();
            await RefreshServers();
        }
    }

    private async Task ShowLog(int _customer_id)
    {
        await ProtectedLocalStorage.SetAsync("selected_customer_id", _customer_id);
        navigationManager.NavigateTo("Account/User/" + _customer_id.ToString() + "/Logs");
    }

    private async Task RefreshServers()
    {
        is_refreshing = true;
        var response = await PostHelper.Request<List<MerchanterServer>>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                        Classes.PostHelper.PostMethod.Get,
                        "api/Server/GetServers");


        if (response != null && response.Success && response.Data != null)
        {
            servers = response.Data;
            if (servers != null && servers.Count == 0)
                page_message = "No servers working.";
            else
                page_message = string.Empty;

            is_refreshing = false;
            StateHasChanged();
        }
        else
        {
            page_message = "Merchanter Server ServiceAPI data response empty.";
        }
    }

    private async Task RefreshCustomers()
    {
        var response = await PostHelper.Request<List<Customer>>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                        Classes.PostHelper.PostMethod.Get,
                        "api/Customer/GetCustomers");

        if (response != null && response.Success && response.Data != null)
        {
            customers = response.Data;
            if (customers != null && customers.Count == 0)
                page_message = "No customers found.";
            else
                page_message = string.Empty;

            StateHasChanged();
        }
        else
        {
            page_message = "Merchanter Server ServiceAPI data response empty.";
        }
    }

    private async Task StartServer(int _customer_id)
    {
        var response = await PostHelper.Request<MerchanterServer>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                        Classes.PostHelper.PostMethod.Get,
                        "api/Server/" + _customer_id.ToString() + "/StartServer");

        if (response != null && response.Success && response.Data != null)
        {
            var started_server = response.Data;
            if (started_server != null)
            {
                if (servers.Where(x => x.customer_id == _customer_id).FirstOrDefault() == null)
                {
                    servers.Add(new MerchanterServer()
                        {
                            customer_id = _customer_id,
                            PID = started_server.PID,
                            customer = customers?.Where(x => x.customer_id == _customer_id).FirstOrDefault()
                        });

                    page_message = "Merchanter Server started. " + DateTime.Now.ToString();
                }
                else
                {
                    page_message = "Cannot start Merchanter Server.";
                }
            }
            else
            {
                page_message = "Merchanter Server ServiceAPI data response empty.";
            }
        }
    }

    private async Task StopServer(int _customer_id)
    {
        var response = await PostHelper.Request<MerchanterServer>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                            Classes.PostHelper.PostMethod.Get,
                            "api/Server/" + _customer_id.ToString() + "/StopServer");

        if (response != null && response.Success && response.Data != null)
        {
            var stopped_server = response.Data;
            if (stopped_server != null)
            {
                var remove_this = servers.Where(x => x.customer_id == _customer_id).FirstOrDefault();
                if (remove_this != null)
                {
                    servers.Remove(remove_this);
                }
                else
                {
                    page_message = "Cannot stop Merchanter Server." + DateTime.Now.ToString();
                }
            }
            else
            {
                page_message = "Merchanter Server ServiceAPI data response empty.";
            }
        }
    }
}