@rendermode InteractiveServer
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IHttpClientFactory ClientFactory
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IConfiguration configuration

@if (customers != null)
{
    <div class="container-fluid sticky-top bg-dark text-light rounded-2 p-3" style="top:60px !important;">
        <div class="row mt-3">
            <div class="col-12 ps-2">
                <h1>Customer Notifications: @(!string.IsNullOrWhiteSpace(CID) && int.Parse(CID) > 0 ? customers.Where(x => x.customer_id == int.Parse(CID)).FirstOrDefault()?.user_name : "N/A") &nbsp;&nbsp;&nbsp;<button type="button" class="btn btn-primary" @onclick="RefreshNotifications">Refresh Notifications</button></h1>
            </div>
        </div>
        @if (!string.IsNullOrWhiteSpace(@page_message))
        {
            <hr />
            <span>@page_message</span>
        }
        <hr />
        <div class="row mt-3">
            <div class="col-8 ps-2">
                <div class="form-floating">
                    <select class="form-select text-start" aria-label="servers-select" @onchange="CustomerSelected">
                        <option value="0" selected>Select to Show Customer Notifications...</option>
                        @foreach (var item in customers)
                        {
                            <option value="@item.customer_id" selected="@(item.customer_id == int.Parse(!string.IsNullOrWhiteSpace(CID) ? CID : "0"))">@item.user_name</option>
                        }
                    </select>
                    <label>Available Servers</label>
                </div>
            </div>
            <div class="col-4 ps-2 align-content-center text-end">
                @if (!string.IsNullOrWhiteSpace(CID) && int.Parse(CID) > 0)
                {
                    <span class="badge text-bg-dark text-light">@currentPage of ? page</span>
                    <button type="button" class="btn btn-primary btn-sm" @onclick="NextPage">Next</button>
                    <button type="button" class="btn btn-primary btn-sm" @onclick="PreviousPage">Previous</button>
                }
            </div>
        </div>
    </div>

}
else
{
    @* @loading *@
    <SpinKitChasingDots />
}

@code {
    [Parameter]
    public string? CID { get; set; } = "0";
    List<Customer>? customers { get; set; }
    List<Notification> customer_notifications { get; set; } = new List<Notification>();
    private string page_message = "Logs not found for this customer.";
    private int currentPage { get; set; } = 1;
    private int pageItemsCount { get; set; } = 20;

    private int filtered_type { get; set; } = 0;
    private string? is_notification_sent { get; set; } = "0";
    private int filtered_date { get; set; } = 0;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (HttpContextAccessor.HttpContext != null)
            {
                int.TryParse(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.admin_id)?.Value, out int admin_id);
                if (admin_id > 0)
                {
                    string? token = HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value;
                    if (!string.IsNullOrWhiteSpace(token))
                    {
                        using (HttpClient httpClient = new HttpClient())
                        {
                            httpClient.BaseAddress = new Uri(configuration["AppSettings:MerchanterServerUrl"]);
                            httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                            using HttpResponseMessage response = await httpClient.GetAsync("api/Customer/GetCustomers");

                            if (response.IsSuccessStatusCode)
                            {
                                var base_respond = JsonConvert.DeserializeObject<BaseResponseModel>(response.Content.ReadAsStringAsync().Result);
                                if (base_respond != null && base_respond.Success && base_respond.Data != null)
                                {
                                    customers = JsonConvert.DeserializeObject<List<Customer>>(base_respond.Data.ToString());
                                    if (customers != null && customers.Count == 0)
                                        page_message = "No servers working.";
                                    else
                                        page_message = string.Empty;
                                }
                                else
                                {
                                    page_message = "ServerAPI Data failed.";
                                }
                            }
                            else
                            {
                                page_message = "ServerAPI failed.";
                            }
                        }
                    }
                }
            }

            if (!string.IsNullOrWhiteSpace(CID) && int.Parse(CID) > 0)
            {
                if (HttpContextAccessor?.HttpContext != null)
                {
                    int.TryParse(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.admin_id)?.Value, out int admin_id);
                    if (admin_id > 0)
                    {
                        string? token = HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value;
                        if (!string.IsNullOrWhiteSpace(token))
                        {
                            using (HttpClient httpClient = new HttpClient())
                            {
                                filtered_type = int.TryParse(ProtectedLocalStorage.GetAsync<string>("n_filtered_type").Result.Value, out int ft) ? ft : 0;
                                filtered_date = int.TryParse(ProtectedLocalStorage.GetAsync<string>("n_filtered_date").Result.Value, out int fd) ? fd : 0;
                                is_notification_sent = ProtectedLocalStorage.GetAsync<string>("n_is_notification_sent").Result.Value;
                                httpClient.BaseAddress = new Uri(configuration["AppSettings:MerchanterServerUrl"]);
                                httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                                using HttpResponseMessage response = await httpClient.PostAsync("api/Customer/" + CID + "/GetCustomerNotifications",
                                new StringContent(JsonConvert.SerializeObject(new ApiFilter()
                                    {
                                        pager = new Pager() { items_per_page = pageItemsCount, current_page_index = currentPage - 1 },
                                        filters = new() { { "filtered_type", filtered_type.ToString() }, { "is_notification_sent", is_notification_sent }, { "filtered_date", filtered_date.ToString() } },
                                    }), Encoding.UTF8, "application/json"));

                                if (response.IsSuccessStatusCode)
                                {
                                    var base_respond = JsonConvert.DeserializeObject<BaseResponseModel>(response.Content.ReadAsStringAsync().Result);
                                    if (base_respond != null && base_respond.Success && base_respond.Data != null)
                                    {
                                        customer_notifications = JsonConvert.DeserializeObject<List<Notification>>(base_respond.Data.ToString());
                                        if (customer_notifications != null && customer_notifications.Count == 0)
                                            page_message = "No servers working.";
                                        else
                                        {
                                            page_message = string.Empty;
                                            StateHasChanged();
                                        }
                                    }
                                    else
                                    {
                                        page_message = "ServerAPI Data failed.";
                                    }
                                }
                                else
                                {
                                    page_message = "ServerAPI failed.";
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                customer_notifications.Clear();
                StateHasChanged();
            }
        }
    }

    protected async Task RefreshNotifications()
    {
        int customer_id = 0;
        if (!string.IsNullOrWhiteSpace(CID) && int.TryParse(CID, out customer_id) && customer_id > 0)
        {
            if (HttpContextAccessor.HttpContext != null)
            {
                int.TryParse(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.admin_id)?.Value, out int admin_id);
                if (admin_id > 0)
                {
                    string? token = HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value;
                    if (!string.IsNullOrWhiteSpace(token))
                    {
                        using (HttpClient httpClient = new HttpClient())
                        {
                            httpClient.BaseAddress = new Uri(configuration["AppSettings:MerchanterServerUrl"]);
                            httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                            using HttpResponseMessage response = await httpClient.PostAsync("api/Customer/" + CID + "/GetCustomerNotifications",
                                new StringContent(JsonConvert.SerializeObject(new ApiFilter()
                                    {
                                        pager = new Pager() { items_per_page = pageItemsCount, current_page_index = currentPage - 1 },
                                        filters = new()
                                        //filters = new() { { "filtered_worker", filtered_worker }, { "filtered_title", filtered_title }, { "filtered_message", filtered_message }, { "filtered_date", filtered_date.ToString() } }
                                    }), Encoding.UTF8, "application/json"));

                            if (response.IsSuccessStatusCode)
                            {
                                var base_respond = JsonConvert.DeserializeObject<BaseResponseModel>(response.Content.ReadAsStringAsync().Result);
                                if (base_respond != null && base_respond.Success && base_respond.Data != null)
                                {
                                    customer_notifications = JsonConvert.DeserializeObject<List<Notification>>(base_respond.Data.ToString());
                                    if (customer_notifications != null && customer_notifications.Count == 0)
                                        page_message = "No servers working.";
                                    else
                                    {
                                        page_message = string.Empty;
                                        StateHasChanged();
                                    }
                                }
                                else
                                {
                                    page_message = "ServerAPI Data failed.";
                                }
                            }
                            else
                            {
                                page_message = "ServerAPI failed.";
                            }
                        }
                    }
                }
            }
        }
        else
        {
            customer_notifications.Clear();
            StateHasChanged();
        }
    }

    protected async Task CustomerSelected(ChangeEventArgs e)
    {
        int customer_id = 0;
        if (e.Value != null && int.TryParse(e.Value.ToString(), out customer_id))
        {
            CID = e.Value.ToString();
            await ProtectedLocalStorage.SetAsync("selected_customer_id", CID != null ? CID : "0");
            await RefreshNotifications();
        }
    }

    private async Task PreviousPage()
    {
        currentPage += 1;
        customer_notifications.Clear();
        await RefreshNotifications();
    }

    private async Task NextPage()
    {
        if (currentPage > 1)
        {
            currentPage -= 1;
            customer_notifications.Clear();
            await RefreshNotifications();
        }
    }
}
