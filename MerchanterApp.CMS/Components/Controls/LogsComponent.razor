@rendermode InteractiveServer
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject IPostHelper PostHelper

<div class="container-fluid sticky-top-lg bg-dark text-light rounded-2 p-3">
    <div class="row mt-3">
        <div class="col-12 ps-2">
            <h2>
                Logs
                <button type="button" class="btn btn-primary" @onclick="RefreshLogs" disabled="@(is_refreshing)"><i class='bi bi-arrow-clockwise @(is_refreshing ? "d-none" : "")'></i><span class='spinner-border spinner-border-sm border-1 @(is_refreshing ? "" : "d-none")' aria-hidden="true"></span></button>
            </h2>
        </div>
    </div>
    @if (show_customer_select && customers != null)
    {
        <div class="row mt-3">
            <div class="col-12 ps-2">
                <div class="form-floating">
                    <select class="form-select text-start" aria-label="servers-select" @onchange="CustomerSelected">
                        <option value="0" selected>Select a Customer to Show Logs...</option>
                        @foreach (var item in customers)
                        {
                            <option value="@item.customer_id" selected="@(item.customer_id == int.Parse(!string.IsNullOrWhiteSpace(CID) ? CID : "0"))">@item.user_name</option>
                        }
                    </select>
                    <label>Available Servers</label>
                </div>
            </div>
        </div>
    }
</div>
<div class="container-fluid">
    <div class="row mt-3">
        <AlertComponent page_message="@page_message" />
        @if (!string.IsNullOrWhiteSpace(CID) && int.Parse(CID) > 0)
        {
            <nav class="d-flex align-items-center justify-content-between bg-dark text-light rounded-2 mb-3">
                <ul class="pagination my-2">
                    <li class="page-item">
                        @currentPage of @pageCount page
                    </li>
                </ul>
                <ul class="pagination my-2">
                    <li class="page-item">
                        <select class="form-select border-0 rounded-0 rounded-start" @onchange="PageCountChanged">
                            <option value="10" selected="@(pageItemsCount == 10 ? true : false)">10</option>
                            <option value="50" selected="@(pageItemsCount == 50 ? true : false)">50</option>
                            <option value="100" selected="@(pageItemsCount == 100 ? true : false)">100</option>
                            <option value="500" selected="@(pageItemsCount == 500 ? true : false)">500</option>
                        </select>
                    </li>
                    <li class="page-item rounded-0 @(is_refreshing ? "disabled" : (currentPage == 1 ? "disabled" : ""))">
                        <button type="button" class="page-link border-0 h-100" @onclick="NextPage" disabled="@(is_refreshing)">Previous</button>
                    </li>
                    <li class="page-item rounded-0 rounded-end @(is_refreshing ? "disabled" : (currentPage == pageCount ? "disabled" : ""))">
                        <button type="button" class="page-link border-0 h-100" @onclick="PreviousPage" disabled="@(is_refreshing)">Next</button>
                    </li>
                </ul>
            </nav>
        }
        <div class="col-12 table-overflow p-0">
            <table class="table table-striped table-hover w-100">
                <thead>
                    @if (!string.IsNullOrWhiteSpace(CID))
                    {
                        <tr class="border-1">
                            <td class="w-25">
                                <div class="form-floating">
                                    <select class="form-select text-start" aria-label="servers-select" @onchange="FilterWorkerChanged">
                                        <option value="0" selected='@(filtered_worker == null || filtered_worker == "0" ? true : false)'>Select Worker...</option>
                                        <option value="main_thread" selected='@(filtered_worker == "main_thread" ? true : false)'>Main Thread</option>
                                        <option value="customer" selected='@(filtered_worker == "customer" ? true : false)'>Customer</option>
                                        <option value="helper_settings" selected='@(filtered_worker == "helper_settings" ? true : false)'>Helper Settings</option>
                                        <option value="invoice" selected='@(filtered_worker == "invoice" ? true : false)'>Invoice</option>
                                        <option value="notification" selected='@(filtered_worker == "notification" ? true : false)'>Notification</option>
                                        <option value="order" selected='@(filtered_worker == "order" ? true : false)'>Order</option>
                                        <option value="product" selected='@(filtered_worker == "product" ? true : false)'>Product</option>
                                        <option value="shipment" selected='@(filtered_worker == "shipment" ? true : false)'>Shipment</option>
                                        <option value="xml" selected='@(filtered_worker == "xml" ? true : false)'>XML</option>
                                    </select>
                                    <label>Worker</label>
                                </div>
                            </td>
                            <td class="w-25">
                                <div class="form-floating">
                                    <select class="form-select text-start" aria-label="servers-select" @onchange="FilterTitleChanged">
                                        <option value="0" selected='@(filtered_title == null || filtered_title == "0" ? true : false)'>Select Title...</option>
                                        <option value="merchanter" selected='@(filtered_title == "merchanter" ? true : false)'>Thread</option>
                                        <option value="error" selected='@(filtered_title == "error" ? true : false)'>Error</option>
                                        <option value="friendly_error" selected='@(filtered_title == "friendly_error" ? true : false)'>Friendly Error</option>
                                        <option value="helper_error" selected='@(filtered_title == "helper_error" ? true : false)'>Helper Error</option>
                                        <option value="xml_product_removed" selected='@(filtered_title == "xml_product_removed" ? true : false)'>XML Product Removed</option>
                                        <option value="xml_price_changed" selected='@(filtered_title == "xml_price_changed" ? true : false)'>XML Price Changed</option>
                                        <option value="xml_qty_changed" selected='@(filtered_title == "xml_qty_changed" ? true : false)'>XML Qty Changed</option>
                                        <option value="info" selected='@(filtered_title == "info" ? true : false)'>Info</option>
                                        <option value="notification" selected='@(filtered_title == "notification" ? true : false)'>Notification</option>
                                        <option value="new_order" selected='@(filtered_title == "new_order" ? true : false)'>New Order</option>
                                        <option value="order_complete" selected='@(filtered_title == "order_complete" ? true : false)'>Order Complete</option>
                                        <option value="order_process" selected='@(filtered_title == "order_process" ? true : false)'>Order Process</option>
                                        <option value="order_processed" selected='@(filtered_title == "order_processed" ? true : false)'>Order Processed</option>
                                        <option value="order_shipped" selected='@(filtered_title == "order_shipped" ? true : false)'>Order Shipped</option>
                                        <option value="order_source_error" selected='@(filtered_title == "order_source_error" ? true : false)'>Order Source Error</option>
                                        <option value="order_update_error" selected='@(filtered_title == "order_update_error" ? true : false)'>Order Update Error</option>
                                        <option value="new_invoice" selected='@(filtered_title == "new_invoice" ? true : false)'>New Invoice</option>
                                        <option value="shipment_error" selected='@(filtered_title == "shipment_error" ? true : false)'>Shipment Error</option>
                                        <option value="product_in_stock" selected='@(filtered_title == "product_in_stock" ? true : false)'>Product in Stock</option>
                                        <option value="product_out_of_stock" selected='@(filtered_title == "product_out_of_stock" ? true : false)'>Product out of Stock</option>
                                        <option value="product_removed" selected='@(filtered_title == "product_removed" ? true : false)'>Product Removed</option>
                                        <option value="product_custom_price_cannot_update" selected='@(filtered_title == "product_custom_price_cannot_update" ? true : false)'>Product Custom Price cannot Update</option>
                                        <option value="product_custom_price_cannot_updated" selected='@(filtered_title == "product_custom_price_cannot_updated" ? true : false)'>Product Custom Price cannot Updated</option>
                                        <option value="product_custom_price_updated" selected='@(filtered_title == "product_custom_price_updated" ? true : false)'>Product Custom Price Updated</option>
                                        <option value="product_custom_price_update_error" selected='@(filtered_title == "product_custom_price_update_error" ? true : false)'>Product Custom Price Update Error</option>
                                        <option value="product_price_updated" selected='@(filtered_title == "product_price_updated" ? true : false)'>Product Price Updated</option>
                                        <option value="product_price_update_error" selected='@(filtered_title == "product_price_update_error" ? true : false)'>Product Price Update Error</option>
                                        <option value="product_qty_updated" selected='@(filtered_title == "product_qty_updated" ? true : false)'>Product Qty Updated</option>
                                        <option value="product_qty_update_error" selected='@(filtered_title == "product_qty_update_error" ? true : false)'>Product Qty Update Error</option>
                                        <option value="product_special_price_updated" selected='@(filtered_title == "product_special_price_updated" ? true : false)'>Product Special Price Updated</option>
                                        <option value="product_special_price_update_error" selected='@(filtered_title == "product_special_price_update_error" ? true : false)'>Product Special Price Update Error</option>
                                        <option value="ftpupload" selected='@(filtered_title == "ftpupload" ? true : false)'>FTP Upload</option>
                                        <option value="qp_mysqlupdate" selected='@(filtered_title == "qp_mysqlupdate" ? true : false)'>QP MySQL Update</option>
                                    </select>
                                    <label>Title</label>
                                </div>
                            </td>
                            <td class="w-25">
                                <div class="form-floating">
                                    <input class="form-control" type="text" name="filter-message" @bind-value="@this.filtered_message" @bind-value:event="oninput"
                                           @onkeydown="FilterMessageChanged">
                                    <label>Message</label>
                                </div>
                            </td>
                            <td class="w-25">
                                <div class="form-floating">
                                    <select class="form-select text-start" aria-label="servers-select" @onchange="FilterDateChanged">
                                        <option value="0" selected='@(filtered_date == 0 ? true : false)'>All Time...</option>
                                        <option value="7" selected='@(filtered_date == 7 ? true : false)'>Weekly</option>
                                        <option value="31" selected='@(filtered_date == 31 ? true : false)'>Monthly</option>
                                    </select>
                                    <label>Date</label>
                                </div>
                            </td>
                        </tr>
                    }
                </thead>
                @if (customer_logs.Count > 0)
                {
                    <tbody class="table-group-divider">
                        @foreach (var item in customer_logs)
                        {
                            <tr>
                                <td class="align-content-center">
                                    <span class='badge @(item.worker != "helper_instance" ? "text-bg-primary" : "text-bg-secondary")'>@item.worker</span>
                                </td>
                                <td class="align-content-center">
                                    <span class='badge @(item.title == "thread" ? "text-bg-dark" : item.title.Contains("error") ? "text-bg-danger" : (item.title == "info" || item.title == "qp_mysqlupdate") ? "text-bg-info" : "text-bg-secondary")'>@item.title</span>
                                </td>
                                @if (item.worker == "notification")
                                {
                                    <td class="align-content-center">
                                        @(item.message.Split("=>")[0])
                                        <button type="button" class="btn btn-warning btn-sm" @onclick='() => Modal.Open(item.title,item.message.Split("=>")[0].Trim(),item.message.Split("=>")[1].Trim(),item.update_date.ToString())'>Show</button>
                                        <ModalComponent @ref="Modal"></ModalComponent>
                                    </td>
                                }
                                else
                                {
                                    <td class="align-content-center user-select-all">
                                        @item.message
                                    </td>
                                }
                                <td class="align-content-center">
                                    @item.update_date.ToString()
                                </td>
                            </tr>
                        }
                    </tbody>
                }
                else
                {
                    <tbody class="table-group-divider">
                        <tr>
                            <td class="text-center" colspan="4">
                                <span>No data.</span>
                            </td>
                        </tr>
                    </tbody>
                }
            </table>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? CID { get; set; }
    [Parameter]
    public bool show_customer_select { get; set; } = true;
    List<Log> customer_logs { get; set; } = new List<Log>();
    List<Customer>? customers { get; set; }
    private string loading = "Loading...";
    private string page_message = "Logs Loading...";
    private int pageCount { get; set; } = 1;
    private int currentPage { get; set; } = 1;
    private int pageItemsCount { get; set; } = 10;
    private string? filtered_worker { get; set; } = "";
    private string? filtered_message { get; set; } = string.Empty;
    private string? filtered_title { get; set; } = "";
    private int filtered_date { get; set; } = 0;
    private bool is_refreshing { get; set; } = false;

    private ModalComponent Modal { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            int customer_id = 0;
            if (!string.IsNullOrWhiteSpace(CID) && int.TryParse(CID, out customer_id))
            {
                await SetSessionValueAsync("selected_customer_id", CID != null ? CID : "0");
            }
            else
            {
                await GetSessionValueAsync("selected_customer_id");
                int.TryParse(CID, out customer_id);
            }
            if (show_customer_select)
                await LoadCustomers();

            if (customer_id > 0)
            {
                await GetSessionValueAsync("filtered_worker");
                await GetSessionValueAsync("filtered_message");
                await GetSessionValueAsync("filtered_title");
                await GetSessionValueAsync("filtered_date");
                await GetSessionValueAsync("filtered_pagecount");
                await LoadCustomerLogs(customer_id);
            }
            else
            {
                await SetSessionValueAsync("selected_customer_id", "0");
                await SetSessionValueAsync("filtered_worker", string.Empty);
                await SetSessionValueAsync("filtered_message", string.Empty);
                await SetSessionValueAsync("filtered_title", string.Empty);
                await SetSessionValueAsync("filtered_date", string.Empty);
                await SetSessionValueAsync("filtered_pagecount", string.Empty);
                customer_logs.Clear();
                StateHasChanged();
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CID != "0")
        {
            //await RefreshLogs();
        }
        await base.OnParametersSetAsync();
    }

    protected async Task LoadCustomers()
    {
        var response = await PostHelper.Request<List<Customer>?>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
            Classes.PostHelper.PostMethod.Get,
            "api/Customer/GetCustomers");

        if (response != null && response.Success && response.Data != null)
        {
            customers = response.Data;
            if (customers != null && customers.Count == 0)
                page_message = "No servers working.";
            else
                page_message = string.Empty;
        }
        else
        {
            page_message = "Merchanter Server ServiceAPI data response empty.";
        }
    }

    protected async Task LoadCustomerLogs(int _customer_id)
    {
        if (_customer_id > 0)
        {
            string json = JsonConvert.SerializeObject(
                new ApiFilter()
                    {
                        Pager = new Pager()
                        {
                            ItemsPerPage = pageItemsCount,
                            CurrentPageIndex = currentPage - 1
                        },
                        Filters = new List<Filter<dynamic>>() {
                        new Filter<dynamic> { Field = "worker", Value = filtered_worker },
                        new Filter<dynamic> { Field = "title", Value = filtered_title },
                        new Filter<dynamic> { Field = "message", Value = filtered_message },
                        new Filter<dynamic> { Field = "date", Value = filtered_date } },
                    });
            var response = await PostHelper.Request<List<Log>>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Post,
                "api/Customer/" + _customer_id.ToString() + "/GetCustomerLogs",
                new StringContent(json, Encoding.UTF8, "application/json")
                );

            if (response != null && response.Success && response.Data != null)
            {
                customer_logs = response.Data;
                if (response.ApiFilter != null)
                    pageCount = (response.ApiFilter.TotalCount.GetValueOrDefault() + pageItemsCount - 1) / pageItemsCount;

                if (customer_logs != null && customer_logs.Count == 0)
                    page_message = "No servers working.";
                else
                    page_message = string.Empty;

                StateHasChanged();
            }
            else
            {
                page_message = "Merchanter Server ServiceAPI data response";
            }
        }
    }

    protected async Task CustomerSelected(ChangeEventArgs e)
    {
        int customer_id = 0;
        if (e.Value != null && int.TryParse(e.Value.ToString(), out customer_id))
        {
            CID = e.Value.ToString();
            await SetSessionValueAsync("selected_customer_id", CID != null ? CID : "0");
            currentPage = 1;
            await RefreshLogs();
        }
    }

    protected async Task FilterWorkerChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            filtered_worker = e.Value.ToString();
            await SetSessionValueAsync("filtered_worker", filtered_worker != null ? filtered_worker : string.Empty);
            currentPage = 1;
            await RefreshLogs();
        }
    }

    protected async Task PageCountChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            pageItemsCount = int.TryParse(e.Value.ToString(), out int pic) ? pic : 10;
            await SetSessionValueAsync("filtered_pagecount", pageItemsCount.ToString());
            currentPage = 1;
            await RefreshLogs();

        }
    }

    protected async Task FilterTitleChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            filtered_title = e.Value.ToString();
            await SetSessionValueAsync("filtered_title", filtered_title != null ? filtered_title : string.Empty);
            currentPage = 1;
            await RefreshLogs();
        }
    }

    protected async Task FilterDateChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            filtered_date = int.TryParse(e.Value.ToString(), out int selected_date) ? selected_date : 0;
            await SetSessionValueAsync("filtered_date", filtered_date.ToString());
            currentPage = 1;
            await RefreshLogs();
        }
    }

    private async Task FilterMessageChanged(KeyboardEventArgs? e)
    {
        var search = this.filtered_message;
        if (e != null)
            if (e.Code == "Enter" || e.Code == "NumpadEnter")
            {
                await SetSessionValueAsync("filtered_message", search);
                currentPage = 1;
                await RefreshLogs();
            }
    }

    protected async Task RefreshLogs()
    {
        is_refreshing = true;
        try
        {
            if (!string.IsNullOrWhiteSpace(CID) && int.TryParse(CID, out int customer_id) && customer_id > 0)
            {
                StateHasChanged();
                await Task.Delay(1);
                await LoadCustomerLogs(customer_id);
                StateHasChanged();
            }
            else
            {
                customer_logs.Clear();
                StateHasChanged();
            }
        }
        finally
        {
            is_refreshing = false;
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage != pageCount)
        {
            currentPage += 1;
            customer_logs.Clear();
            await RefreshLogs();
        }
    }

    private async Task NextPage()
    {
        if (currentPage > 1)
        {
            currentPage -= 1;
            customer_logs.Clear();
            await RefreshLogs();
        }
    }

    async Task GetSessionValueAsync(string _session)
    {
        if (_session == "selected_customer_id")
        {
            var result = await ProtectedLocalStorage.GetAsync<string>("selected_customer_id");
            if (result.Success)
                CID = result.Value;
        }
        if (_session == "filtered_worker")
        {
            var result = await ProtectedLocalStorage.GetAsync<string>("filtered_worker");
            if (result.Success)
                filtered_worker = result.Value;
        }
        if (_session == "filtered_date")
        {
            var result = await ProtectedLocalStorage.GetAsync<string>("filtered_date");
            if (result.Success)
                filtered_date = int.TryParse(result.Value, out int fd) ? fd : 0;
        }
        if (_session == "filtered_title")
        {
            var result = await ProtectedLocalStorage.GetAsync<string>("filtered_title");
            if (result.Success)
                filtered_title = result.Value;
        }
        if (_session == "filtered_message")
        {
            var result = await ProtectedLocalStorage.GetAsync<string>("filtered_message");
            if (result.Success)
                filtered_message = result.Value;
        }
        if (_session == "filtered_pagecount")
        {
            var result = await ProtectedLocalStorage.GetAsync<string>("filtered_pagecount");
            if (result.Success)
                pageItemsCount = int.TryParse(result.Value, out int pc) ? pc : 10;
        }
    }

    async Task SetSessionValueAsync(string _session, string _value)
    {
        if (_session == "selected_customer_id")
        {
            await ProtectedLocalStorage.SetAsync("selected_customer_id", _value);
        }
        if (_session == "filtered_worker")
        {
            await ProtectedLocalStorage.SetAsync("filtered_worker", _value);
        }
        if (_session == "filtered_date")
        {
            await ProtectedLocalStorage.SetAsync("filtered_date", _value);
        }
        if (_session == "filtered_title")
        {
            await ProtectedLocalStorage.SetAsync("filtered_title", _value);
        }
        if (_session == "filtered_message")
        {
            await ProtectedLocalStorage.SetAsync("filtered_message", _value);
        }
        if (_session == "filtered_pagecount")
        {
            await ProtectedLocalStorage.SetAsync("filtered_pagecount", _value);
        }
    }
}
