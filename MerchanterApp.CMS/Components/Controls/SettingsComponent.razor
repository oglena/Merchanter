@rendermode InteractiveServer
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using System.Text
@inject IHttpContextAccessor HttpContextAccessor
@inject IPostHelper PostHelper

<AlertComponent page_message="@page_message" message_status="@message_status" />

<div class="container-fluid">
    @if (settings != null && settings.settings != null)
    {
        <div class="row">
            <div class="col-md-12 pb-2 bg-light rounded-3">
                <EditForm Model="settings.settings" class="container-fluid">
                    <div class="row mt-3">
                        <div class="col-12 ps-2 mb-3">
                            <div class="form-floating">
                                <InputText type="text" class="form-control" DisplayName="user_name" @bind-Value="settings.settings.company_name" />
                                <label for="user_name" class="form-label">Company Name</label>
                            </div>
                        </div>
                    </div>
                    <hr />
                    <div class="row mt-3">
                        <div class="row mt-3">
                            <h4>Currency Rates</h4>
                            <div class="col-4 ps-2 mb-3">
                                <div class="input-group mb-3">
                                    <span class="input-group-text">TL</span>
                                    <InputNumber type="text" class="form-control" DisplayName="TL_rate" placeholder="Uneditable" @bind-Value="settings.settings.rate_TL" disabled="true" />
                                </div>
                            </div>
                            <div class="col-4 ps-2 mb-3">
                                <div class="input-group mb-3">
                                    <span class="input-group-text">USD</span>
                                    <InputNumber type="text" class="form-control" DisplayName="USD_rate" @bind-Value="settings.settings.rate_USD" />
                                </div>
                            </div>
                            <div class="col-4 ps-2 mb-3">
                                <div class="input-group mb-3">
                                    <span class="input-group-text">EUR</span>
                                    <InputNumber type="text" class="form-control" DisplayName="EUR_rate" @bind-Value="settings.settings.rate_EUR" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="row mt-3">
                            <h4>Other Settings</h4>
                            <div class="col-6 ps-2 mb-3">
                                <div class="form-floating">
                                    <InputNumber type="text" class="form-control" DisplayName="daysto_ordersync" @bind-Value="settings.settings.daysto_ordersync" />
                                    <label for="daysto_ordersync" class="form-label">Days to Order Sync</label>
                                </div>
                            </div>
                            <div class="col-6 ps-2 mb-3">
                                <div class="form-floating">
                                    <InputNumber type="text" class="form-control" DisplayName="daysto_invoicesync" @bind-Value="settings.settings.daysto_invoicesync" />
                                    <label for="daysto_invoicesync" class="form-label">Days to Invoice Sync</label>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="form-check form-switch mt-2 ms-3">
                                <InputCheckbox type="checkbox" class="form-check-input" role="switch" @bind-Value="settings.settings.xml_qty_addictive_enable"></InputCheckbox>
                                <label class="form-check-label">&nbsp;<abbr title="If main source have positive stock, this disables qty increment from other sources." class="initialism">Qty Additive Status</abbr></label>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-12 ps-2 mb-3">
                                <button type="submit" class="btn btn-outline-success float-end" @onclick="@(() => SaveGeneralSettings(settings.settings))" disabled="@(is_refreshing)"><i class="bi bi-floppy"></i>&nbsp;Save These Settings&nbsp;&nbsp;<span class='spinner-border spinner-border-sm border-1 @(is_refreshing ? "" : "d-none")' aria-hidden="true"></span></button>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? CID { get; set; }
    private bool is_refreshing = false;
    private string loading = "Loading...";
    private string page_message = "Settings Loading...";
    private string message_status = "dark";
    Customer? customer { get; set; }
    SettingsMerchanter? settings { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            int customer_id = 0;
            if (!string.IsNullOrWhiteSpace(CID) && int.TryParse(CID, out customer_id))
            {
                //await LoadCustomer(customer_id);
                await LoadCustomerSettings(customer_id);
            }
        }
    }

    public async Task LoadCustomerSettings(int _customer_id)
    {
        if (_customer_id > 0)
        {
            var response = await PostHelper.Request<SettingsMerchanter>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Get,
                "api/Settings/" + _customer_id.ToString() + "/GetCustomerSettings");

            if (response != null && response.Success && response.Data != null)
            {
                settings = response.Data;
                page_message = string.Empty;
                StateHasChanged();
            }
            else
            {
                page_message = "Merchanter Server ServiceAPI data response empty.";
            }
        }
    }

    public async Task LoadCustomer(int _customer_id)
    {
        if (_customer_id > 0)
        {
            customer = null;
            var response = await PostHelper.Request<Customer>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                Classes.PostHelper.PostMethod.Get,
                "api/Customer/" + _customer_id.ToString() + "/GetCustomer");

            if (response != null && response.Success && response.Data != null)
            {
                customer = response.Data;
                StateHasChanged();
            }
            else
            {
                page_message = "Merchanter Server ServiceAPI data response empty.";
            }
        }
    }

    public async Task SaveGeneralSettings(SettingsGeneral _settings)
    {
        if (settings != null && int.TryParse(CID, out int customer_id))
        {
            int.TryParse(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.admin_id)?.Value, out int admin_id);
            if (admin_id > 0)
            {
                is_refreshing = true;
                string json = JsonConvert.SerializeObject(_settings);
                var response = await PostHelper.Request<SettingsGeneral>(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value,
                    Classes.PostHelper.PostMethod.Put,
                    "api/Settings/" + CID + "/SaveGeneralSettings",
                    new StringContent(json, Encoding.UTF8, "application/json"));

                if (response != null && response.Success && response.Data != null)
                {
                    settings.settings = response.Data;
                    page_message = "General settings saved. [" + DateTime.Now.ToString() + "]";
                    message_status = "success";
                }
                else
                {
                    page_message = "General settings save failed. [" + DateTime.Now.ToString() + "]";
                    message_status = "danger";
                }
                is_refreshing = false;
            }
        }
    }
}
