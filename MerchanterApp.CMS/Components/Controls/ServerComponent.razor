@using Merchanter.ServerService.Classes
@using System.Text.Json.Serialization
@using Merchanter.ServerService.Models
@using Newtonsoft.Json
@inject IHttpClientFactory ClientFactory
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAccessor

<hr />
<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-12 ps-2">
            @if (servers != null)
            {
                <table class="table table-responsive">
                    <thead>
                        <tr>
                            <th>Customer ID</th>
                            <th>Process ID</th>
                        </tr>
                    </thead>
                    @foreach (var item in servers)
                    {
                        <tr>
                            <td>@item.customer_id</td>
                            <td>@item.PID</td>
                        </tr>
                    }
                </table>
            }
        </div>
    </div>
</div>
@code {
    private List<MerchanterServer>? servers { get; set; }
    private string page_message = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && HttpContextAccessor.HttpContext != null)
        {
            int.TryParse(HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.admin_id)?.Value, out int admin_id);
            if (admin_id > 0)
            {
                string? token = HttpContextAccessor?.HttpContext?.User?.FindFirst(Variables.auth_token)?.Value;
                if (!string.IsNullOrWhiteSpace(token))
                {
                    using (HttpClient httpClient = new HttpClient())
                    {
                        BaseResponseModel base_respond;
                        httpClient.BaseAddress = new Uri("http://localhost:5444/");
                        httpClient.DefaultRequestHeaders.Add("Authorization", "Bearer " + token);
                        using HttpResponseMessage response = await httpClient.GetAsync("api/Server/GetServers");

                        if (response.IsSuccessStatusCode)
                        {
                            base_respond = JsonConvert.DeserializeObject<BaseResponseModel>(response.Content.ReadAsStringAsync().Result);
                            if (base_respond != null && base_respond.Success && base_respond.Data != null)
                            {
                                servers = JsonConvert.DeserializeObject<List<MerchanterServer>>(base_respond.Data.ToString());
                                //servers = (List<MerchanterServer>)base_respond.Data;
                            }
                            else
                            {
                                page_message = "No servers working.";
                            }
                        }
                        else
                        {
                            page_message = "ServerAPI failed.";
                        }
                    }
                }
            }
            StateHasChanged();
        }
    }
}
